///////////// Include this file into every script /////////////
// This file is necessary for basic instuctions to work
// Do not edit this file
// Make sure this file can be included when it's in a different subfolder for your application

//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////
//////////////// Pyrois base instructions ////////////////

/*
Copyright (c) 2017 Michal Kuch√°rik (Tau)

All rights reserved.

Permission to use, copy, modify, and/or distribute this software for any purpose
with or without fee is hereby granted, provided that the above copyright notice
and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT,
OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS
ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

defineInstruction(none, 0);

defineInstruction(jmp, 1, int);
defineInstruction(jf, 2, int, int);
defineInstruction(jt, 3, int, int);

defineInstruction(set, 4, void, void, void);
defineInstruction(getsadr, 5, void, void, void);
defineInstruction(getaadr, 6, void, void, int);
defineInstruction(getsval, 7, void, void, void);
defineInstruction(getaval, 8, void, void, int);
defineInstruction(setstruc, 9, void);

defineInstruction(add, 10, void, void, void);
defineInstruction(sub, 11, void, void, void);
defineInstruction(mul, 12, void, void, void);
defineInstruction(div, 13, void, void, void);
defineInstruction(pow, 14, void, void, void);
defineInstruction(mod, 15, void, void, void);

defineInstruction(and, 16, void, void, void);
defineInstruction(or, 17, void, void, void);
defineInstruction(not, 18, void, void);

defineInstruction(equal, 19, void, void, void);
defineInstruction(lesser, 20, void, void, void);
defineInstruction(greater, 21, void, void, void);

defineInstruction(call, 22, int);
// never inside script
//defineInstruction(outerCall, 23, int);
defineInstruction(setReturnVariable, 24, void);
defineInstruction(function, 25, int);
defineInstruction(return, 26, void);
defineInstruction(returnVoid, 27);
defineInstruction(end, 28);
defineInstruction(inc, 29, int);
defineInstruction(dec, 30, int);

////////////////////////////////////////////////////

defineStruct(vec2, 2)
{
	defineStructVariable(vec2, float, x);
	defineStructVariable(vec2, float, y);
}

defineStruct(vec3, 3)
{
	defineStructVariable(vec3, float, x);
	defineStructVariable(vec3, float, y);
	defineStructVariable(vec3, float, z);
}

defineStruct(vec4, 4)
{
	defineStructVariable(vec4, float, x);
	defineStructVariable(vec4, float, y);
	defineStructVariable(vec4, float, z);
	defineStructVariable(vec4, float, w);
}

defineStruct(mat2x2, 5)
{
	defineStructVariable(mat2x2, vec2, r0);
	defineStructVariable(mat2x2, vec2, r1);
}

defineStruct(mat3x3, 6)
{
	defineStructVariable(mat3x3, vec3, r0);
	defineStructVariable(mat3x3, vec3, r1);
	defineStructVariable(mat3x3, vec3, r2);
}

defineStruct(mat4x4, 7)
{
	defineStructVariable(mat4x4, vec4, r0);
	defineStructVariable(mat4x4, vec4, r1);
	defineStructVariable(mat4x4, vec4, r2);
	defineStructVariable(mat4x4, vec4, r3);
}

defineInstruction(sinoi, 900, float, float);
defineInstruction(cosoi, 901, float, float);

defineFunction(sin, float, float:_in_sinus_in_param_)
{
	sinoi(_in_sinus_in_param_, _in_sinus_in_param_);
	return(_in_sinus_in_param_);
}

defineFunction(cos, float, float:_in_cosinus_in_param_)
{
	cosoi(_in_cosinus_in_param_, _in_cosinus_in_param_);
	return(_in_cosinus_in_param_);
}

defineFunction(DistancePoints, float, vec3:_in_DistancePoints_in_param1_, vec3:_in_DistancePoints_in_param2_)
{
	_in_DistancePoints_in_param1_.x = (
		(_in_DistancePoints_in_param1_.x - _in_DistancePoints_in_param2_.x)^2 +
		(_in_DistancePoints_in_param1_.y - _in_DistancePoints_in_param2_.y)^2 +
		(_in_DistancePoints_in_param1_.z - _in_DistancePoints_in_param2_.z)^2)^0.5;
	return(_in_DistancePoints_in_param1_.x);
}

defineFunction(DistancePoints2D, float, vec3:_in_DistancePoints2D_in_param1_, vec3:_in_DistancePoints2D_in_param2_)
{
	_in_DistancePoints2D_in_param1_.x = (
		(_in_DistancePoints2D_in_param1_.x - _in_DistancePoints2D_in_param2_.x)^2 +
		(_in_DistancePoints2D_in_param1_.z - _in_DistancePoints2D_in_param2_.z)^2)^0.5;
	return(_in_DistancePoints2D_in_param1_.x);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////// Soviet Republic instructions ////////////////


// set money
defineInstruction(Money_SetRUB, 1000, int);
defineInstruction(Money_SetUSD, 1001, int);

// get money
defineInstruction(Money_GetRUB, 1002, int);
defineInstruction(Money_GetUSD, 1003, int);

// adds money for player
defineInstruction(Money_AddRUB, 1005, int);
defineInstruction(Money_AddUSD, 1006, int);

// opens a debug window and displays text, max 250 characters
defineInstruction(Window_ShowText, 1012, string);

// get a random integer number
defineInstruction(Random, 1010, int);

// get game window size
defineInstruction(GetScreenSize, 1011, int, int);

// first parameter is output height, second is input position
defineInstruction(Terrain_GetHeight, 1013, float, vec3);

// first param rub, second param usd; 0, 0 - build form resources
defineInstruction(GetAutofinance, 1088, int, int);

// 1 - imperial, 0 - metric
defineInstruction(GetGameUnitSetup, 1128, int);

// get identifier of the actual cursor tool;
// char[0] == 0 if no tool is selected or if array is shorter than tools identifier; best to use array length 64
defineInstruction(Tools_GetActualTool, 1085, char[]);

// get building type, -1 if no tool, or no building type
defineInstruction(Tools_GetActualToolBuildingType, 1086, int);

// get building subtype, -1 if no tool, or no building type
defineInstruction(Tools_GetActualToolBuildingSubType, 1096, int);

// create a small box in the world (can serve as a marker)
defineInstruction(ScreenMark_Create, 1014, vec3);
// deletes all screen mark boxes
defineInstruction(ScreenMark_ClearAll, 1015);

// starts a new script, script has to be in the same directory as current script
defineInstruction(Script_StartNew, 1016, string);
// check if script with a name exists, input name, output char 0/1
defineInstruction(Script_Exists, 1032, string, char);

// out - exists 0/1
defineInstruction(ActiveScenario_Exists, 1205, char);

// how many script instructions are executed per second <1, 50000>
defineInstruction(Script_SetUpdateFrequency, 1017, int);
defineInstruction(Script_GetUpdateFrequency, 1029, int);

// in case of in-game performance heavy functions, you can use this instruction
// to reset the update time and execute these functions only once per frame
defineInstruction(Script_ResetUpdateTime, 1024);

// scripts are by default not continuous, meaning they are deleted once they reach the last line
// by setting this to 1, your script will reset after it reaches the last line
defineInstruction(Script_SetContinuous, 1033, int);

// destroy a script by name
defineInstruction(Script_DestroyByName, 1034, string);

// similar to Script_SetContinuous, if this is set to 1 script will be reset after the last line
// however, if this is set to 1, the entire script will be executed in 1 frame
// be careful with this instruction as it can freeze the game; see freeze.txt example for more
defineInstruction(Script_ExecutionEntireAtOnce, 1035, int);

// if Script_ExecutionEntireAtOnce is set to 1, entire script will be executed after every x seconds
// default value for this is 1 second
defineInstruction(Script_ExecutionEntireAtOnceCD, 1050, float);

// get current script time in seconds
// get amount of seconds since this script was launched, ignore game pause and game speed
defineInstruction(Script_GetTime, 1018, float);

// get current script time in seconds
// get amount of seconds since this script was launched, accounts for game pause and game speed
defineInstruction(Script_GetGameTime, 1123, float);

// all instructions inside of critical section are executed in a single frame
// be careful with this instruction as it can freeze the game; see freeze.txt example for more
defineInstruction(Script_EnterCriticalSection, 1036);
defineInstruction(Script_LeaveCriticalSection, 1037);

// pause script execution for x seconds
// does nothing if Script_ExecutionEntireAtOnce is 1 or if inside Script_EnterCriticalSection
defineInstruction(Script_Sleep, 1031, float);

defineInstruction(Script_End, 1004);

// Add a log entry to "log.html"
// void instructions can use only direct variables, meaning you can not use arrays or struct members
// if you want to print an array member or a struct member, you first have to copy it to a simple variable
// var = array[5]; Log_PrintInfo(var);
// var = building.vPosition.x; Log_PrintInfo(var);
defineInstruction(Log_PrintInfo, 3000, void);
defineInstruction(Log_PrintWarning, 3001, void);
defineInstruction(Log_PrintError, 3002, void);

// input: identifier, text
defineInstruction(Objectives_CreateNewString, 1020, string, string);
// input: identifier, lang id
defineInstruction(Objectives_CreateNewLangID, 1021, string, int);

// input: identifier, required value, image file name
// no value - display amount only; >0 - distplay x/x; <0 - x.f/x.f; <0.01 - no numbers, only image
defineInstruction(Objective_AddRequirement, 1022, string, float, string);

// input: identifier, index, value
defineInstruction(Objective_UpdateRequirement, 1023, string, int, float);

// input: identifier, index, value
defineInstruction(Objective_UpdateRequiredValue, 1087, string, int, float);

// input: identifier, index; set value to required value
defineInstruction(Objective_UpdateRequirementToTarget, 1027, string, int);

// input: identifier
defineInstruction(Objective_SetComplete, 1028, string);
// remove by identifier
defineInstruction(Objective_Remove, 1030, string);

// in inidentifier, out 0/1
defineInstruction(Objective_Exist, 1138, string, int);

// deletes all objectives
// note: objectives all global and shared between all scritps
// if you have multiple scritps running this will delete objectives for all of them
defineInstruction(Objectives_ClearAll, 1019);


// get date as day of year 0-364 and year
defineInstruction(Date_GetCurrentDate_D365Y, 1025, int, int);
// get date as day, month, year
defineInstruction(Date_GetCurrentDate_DMY, 1026, int, int, int);

// set date as day of year 0-364 and year
defineInstruction(Date_SetCurrentDate_D365Y, 1040, int, int);

// create a notification message
// input: caption lang id, text lang id, image file name, position in world
defineInstruction(Notification_CreateNewLangIDPic, 1053, int, int, string, vec3);
// input: caption, text, image file name, position in world
defineInstruction(Notification_CreateNewStringPic, 1054, string, string, string, vec3);


//////////////////////////////////////////
// following instructions can allow or prevent certain actions
// input for int is 0/1 to prevent/allow; -1 leave original state

// Allow blueprint purchase, allow use of purchased blueprints, blueprint purchase price multiplier
defineInstruction(Permissions_BlueprintAllowUSD, 1042, int, int, float);
defineInstruction(Permissions_BlueprintAllowRUB, 1043, int, int, float);

// Allow delivery of resources, Allow purchase of resources only on zoll posts, purchase price multiplier
defineInstruction(Permissions_ResourcesAllowPurchaseUSD, 1044, int, int, float);
defineInstruction(Permissions_ResourcesAllowPurchaseRUB, 1045, int, int, float);

// allow immigration, immigran purchase price multiplier
defineInstruction(Permissions_ImmigrantAllowPurchaseUSD, 1046, int, float);
defineInstruction(Permissions_ImmigrantAllowPurchaseRUB, 1047, int, float);

// allow selling of resources on zoll posts, allow new vehicle sell on zoll posts, receive money when trashing vehicles
defineInstruction(Permissions_ResourcesAllowSellUSD, 1048, int, int, int);
defineInstruction(Permissions_ResourcesAllowSellRUB, 1049, int, int, int);

// allow purchase of vehicles: road, rail, ships, airplanes+heli, cabins
defineInstruction(Permissions_VehicleAllowPurchaseUSD, 1051, int, int, int, int, int);
defineInstruction(Permissions_VehicleAllowPurchaseRUB, 1052, int, int, int, int, int);

//////////////////////////////////////////////////////////////////
// following instructions are used for scenarios

// title text id, body text id
defineInstruction(Scenario_WindowSimple, 1055, void, void);
// is scenario window open, out - 0/1
defineInstruction(Scenario_WindowExists, 1069, int);

// title text id, body text id, image file name, window type 1 - small, 2 - medium, 3 - big
defineInstruction(Scenario_WindowWithImageLeft, 1056, void, void, string, int);

// title text id, body text id, image file name, window type 1 - small, 2 - medium, 3 - big
defineInstruction(Scenario_WindowWithImageTopLeft, 1057, void, void, string, int);

// title text id, objectives text id array, menu element identifier
defineInstruction(Scenario_WindowPointerGUI, 1058, void, void, string);
/*
identifiers should be used as: <identifier>_<tag>; example: building_demolish_oldbuilding
window element identifiers are:
	building_demolish
	building_cancelconstruction
	building_startconstruction
	building_cancrub
	building_cancusd
	building_foundrub
	building_foundusd
	building_skin
	building_decproductivity
	building_incproductivity
	building_decproductivityprof
	building_incproductivityprof
	building_buyresusd
	building_buyresrub
	building_buyvehicleusd
	building_buyvehiclerub
	building_trashvehicle
	building_setcontainer
	building_moveworkers
	building_buyworkersusd
	building_buyworkersrub
	building_buyexpertsrub
	building_walking
	building_parking
	building_electric
	building_heating
	building_rename
	building_caption
	building_callvehicleshome
	building_sellallvehicles
	building_threedots
	
	vehicle_buttonadd
	vehicle_buttonexportrub
	vehicle_buttonexportusd
	vehicle_buttonaddcopy
	vehicle_buttondeletestop
	vehicle_buttonmovetostop
	vehicle_buttonexportrub
	vehicle_buttondepo
	vehicle_buttonchangedepo
	vehicle_buttonflip
	vehicle_buttonflatbed
	vehicle_buttonview
	vehicle_buttonsell
	vehicle_buttonrepaint
	vehicle_buttonchangetype
	vehicle_buttonrename
	vehicle_buttoncanload
	
	storage_plus_<resource>
	storage_minus_<resource>
	
for menu elements its: <tabidentifier>_<toolidentifier>; example forcitizens_firestation

for static elements we also mention max levels
for static elements: <identifier>

	gui_minimap_openclose	1
	gui_minimap_scale		2
	
	gui_minimap_coal		2
	gui_minimap_iron		2
	gui_minimap_oil			2
	gui_minimap_uranium		2
	gui_minimap_bauxit		2
	
	function_f1				1
	function_f2				1
	function_f3				1
	function_f4				1
	contruction_usd			1
	contruction_rub			1
	contruction_office		1
	contruction_start		1
	
	miniwindow_goods		1
	miniwindow_citizens		1
*/

// same as Scenario_WindowPointerGUI; however this instruction creates the red arrow pointer and leaves in on the screen without the need for a window with explanations
// enter empy string "" to remove red arrow
// second param - importance, if red arrow is already present, don't change it unless this gets called with higher importance
defineInstruction(Scenario_RedArrowPointerGUI, 1079, string, int);

// places the red arrow into the world, importance
defineInstruction(Scenario_RedArrowPointerWorld, 1090, vec3, int);

// out - is arrow active, out importance
defineInstruction(Scenario_RedArrowPointerGUIExist, 1089, int, int);

// is mouse over red arrow, out 0/1; only used for <for static elements>
defineInstruction(Scenario_RedArrowMouseOver, 1080, int);
// was mouse pressed over red arrow, out 0/1; only used for <for static elements>
defineInstruction(Scenario_RedArrowMouseDown, 1081, int);

// is pointer window currently visible; this may return 0 even when pointer window exists but is not in field of view of camera
defineInstruction(Scenario_PointerWindowOpened, 1076, int);

// title text id, objectives text id array, 3d position on map
defineInstruction(Scenario_WindowPointerMap, 1059, void, void, vec3);

// title text id, objectives text id array, building tag that was set with Building_SetTag
defineInstruction(Scenario_WindowPointerBuilding, 1060, void, void, void);

// title text id, objectives text id array, vehicle tag that was set with Building_SetTag
defineInstruction(Scenario_WindowPointerVehicle, 1062, void, void, void);

// out - exists; 0 - none; 1 - gui; 2 - map; 3 - building; 4 - vehicle; 5 - red arrow only
defineInstruction(Scenario_WindowPointerExists, 1072, int);

defineInstruction(Scenario_WindowPointerClose, 1084);

// returns current screen position of the red arrow associated with Scenario_WindowPointerGUI; position x, position y, level;
// if Scenario_WindowPointerGUI is not open return 0 for all outputs
defineInstruction(Scenario_WindowPointer_GetArrowPostionLevel, 1078, int, int, int);

// in - position in 3d world, in - radius
defineInstruction(Scenario_CreateWorldArrow, 1064, vec3, float);
defineInstruction(Scenario_RemoveWorldArrow, 1065);

// valid x and z values are in range -7500..7500; in position, in camera distance from point
defineInstruction(Scenario_ObjectiveMoveCameraTo, 1073, vec3, float);

// in - identifier, in caption text id, in description text
defineInstruction(Scenario_ObjectiveCreate, 1066, string, void, void);

// in identifier, in objective text ids
defineInstruction(Scenario_ObjectiveSetObjectives, 1067, string, void);

// in identifier, in id of objective, 0/1 complete or not
defineInstruction(Scenario_ObjectiveSetCompleted, 1068, string, int, int);

defineInstruction(Scenario_ObjectiveOpenWindow, 1074, string);
defineInstruction(Scenario_CloseMainTabs, 1082);

// in - identifier
defineInstruction(Scenario_ObjectiveDestroy, 1070, string);
defineInstruction(Scenario_ObjectiveClearAll, 1071);

// only for official scenarios
defineInstruction(Scenario_UnlockNextScenarios, 1083);
defineInstruction(Scenario_GetNumberOfRemainingScenarios, 1206, int);

// in - user input iden (get form controls.ini), output 0/1
defineInstruction(Scenario_GetUserInput, 1075, string, int);

// out - does user have default controls
defineInstruction(Scenario_AreUserControlsDefault, 1136, int);

// out - does user have default controls, in - ident
defineInstruction(Scenario_IsUserControlDefault, 1137, string, int);

// out - mouse x, y
defineInstruction(Scenario_GetMousePosition, 1077, int, int);

// in - building index, vehicle ident; similar to purchase vehicle via purchase window; does not substract money
defineInstruction(Scenario_AddRoadVehicleToBuilding, 1124, int, string);
// in - vehicle ident, not limited to road vehicles
defineInstruction(Scenario_AddRoadVehicleBlueprint, 1125, string);
defineInstruction(Scenario_RemoveRoadVehicleBlueprint, 1126, string);
defineInstruction(Scenario_UnlockResearch, 1127, string);

// in - building id, in - type ident
defineInstruction(Scenario_OrderAirplaneToBuilding, 1129, int, string);
defineInstruction(Scenario_OrderHelicopterToBuilding, 1139, int, string);

defineInstruction(Scenario_GetTourismTripRatingSoviet, 1130, float);
defineInstruction(Scenario_GetTourismTripRatingWest, 1131, float);

defineInstruction(Scenario_FollowCameraOnVehicle, 1133, int);


// persistent scenario objectives
// in - lang id
defineInstruction(ScenarioPersistent_SetName, 1207, int);
// in - current, target, name id
defineInstruction(ScenarioPersistent_AddRequirement, 1208, float, float, int);
defineInstruction(ScenarioPersistent_UpdateRequirement, 1211, float, int);
// in - id
defineInstruction(ScenarioPersistent_RemoveRequirement, 1209, int);
defineInstruction(ScenarioPersistent_ClearAll, 1210);


//////////////////
// researches

defineInstruction(Research_IsCompleted, 1091, string, int);
defineInstruction(Research_IsAvailable, 1092, string, int);
defineInstruction(Research_CurrentlyResearched, 1093, string, int);
defineInstruction(Research_GetCurrentlyResearchedBuildingID, 1094, string, int);
defineInstruction(Research_PercFinished, 1095, string, float);

defineInstruction(Research_GetNumOfAll, 1122, int);
defineInstruction(Research_GetNumOfCompleted, 1098, int);

// get i-th completed research, out char array with ident should be at least char[64],
defineInstruction(Research_GetCompletedByIndex, 1099, int, char[]);

// get i-th incomplete research, out char array with ident should be at least char[64],
defineInstruction(Research_GetIncompletByIndex, 1120, int, char[]);

// in - research identifier
// out - BUILDINGSUBTYPE - BUILDINGSUBTYPE_MEDICAL, BUILDINGSUBTYPE_TECHNICAL, BUILDINGSUBTYPE_SOVIET
defineInstruction(Research_GetUniversityType, 1121, char[], int);


//////////////////
// global events

// in - duration, peak, strength, infection rate
defineInstruction(GlobalEvent_StartEpidemy, 1097, int, int, float, int);

// in - strength, in - radius, in - position
defineInstruction(GlobalEvent_StartEarthquake, 1132, float, float, vec3);

// in - type, out - 0/1
defineInstruction(GlobalEvent_Exists, 1134, int, int);
defineInstruction(GlobalEvent_EarthquakePreparing, 1135, int);


///////////////////////////////////////////////////////////////
// string instructions

// void as an instruction parameter means that the instruction will acept every type of variable
// however, not all types are supported by the instruction

// out - char[]; in - void - string, char[], char, int, float
defineInstruction(strcpy, 2001, char[], void);

// out - char[]; in - void - string, char[], char, int, float
defineInstruction(strcat, 2002, char[], void);

// in - char[]; in - void - string, char[]; out - c++ strcmp result
defineInstruction(strcmp, 2003, char[], void, int);

// in - char[]; out - length of text, NOT length of char array
defineInstruction(strlen, 2004, char[], int);

// in - char[]; in - void - string, char[], subtext to search for; different form c++ strstr: out - index to first occurence of substring, -1 if not present
defineInstruction(strstr, 2005, char[], void, int);

// out - char[]; in - char[]; in - start index of second string
defineInstruction(strcpyFrom, 2006, char[], char[], int);

// opens a debug window and displays text, max 250 characters
defineInstruction(Window_ShowCharArray, 2007, char[]);

defineInstruction(atoi, 2008, char[], int);
defineInstruction(atof, 2009, char[], float);

defineInstruction(debugKey1Pressed, 3003, char);
defineInstruction(debugKey2Pressed, 3004, char);
defineInstruction(debugKey3Pressed, 3005, char);

defineVariable(char, __IsDebugKey_Func_HlpVar_);

defineFunction(IsDebugKey1Pressed, char)
{
	debugKey1Pressed(__IsDebugKey_Func_HlpVar_);
	return(__IsDebugKey_Func_HlpVar_);
}

defineFunction(IsDebugKey2Pressed, char)
{
	debugKey2Pressed(__IsDebugKey_Func_HlpVar_);
	return(__IsDebugKey_Func_HlpVar_);
}

defineFunction(IsDebugKey3Pressed, char)
{
	debugKey3Pressed(__IsDebugKey_Func_HlpVar_);
	return(__IsDebugKey_Func_HlpVar_);
}

//////////////////////////////////////////
// Current Game Settings

defineStruct(GameSetting, 90)
{
	defineStructVariable(GameSetting, int, Realistic);
	defineStructVariable(GameSetting, int, Research);
	defineStructVariable(GameSetting, int, Trafic);
	defineStructVariable(GameSetting, int, EletricityLevel);
	defineStructVariable(GameSetting, int, WaterManagement);
	defineStructVariable(GameSetting, int, WasteManagement);
	defineStructVariable(GameSetting, int, Maintenance);
	defineStructVariable(GameSetting, int, SeasonsEnabled);
	defineStructVariable(GameSetting, int, DayNightEnabled);
	defineStructVariable(GameSetting, int, WorkerDemandsLevel);
	defineStructVariable(GameSetting, int, EventsEnabled);
	defineStructVariable(GameSetting, int, FiresEnabled);
	defineStructVariable(GameSetting, int, PollutionEnabled);
	defineStructVariable(GameSetting, int, VehicleLock);
	defineStructVariable(GameSetting, int, EducationLevel);
	defineStructVariable(GameSetting, int, CrimeEnabled);
	
	defineStructInstruction(GameSetting, GetCurrentGameSettigns, 9000);
}


//////////////////////////////////////////
//////////////////////////////////////////
// BUILDINGS
//////////////////////////////////////////
//////////////////////////////////////////

//data struct
///////////////////////////
defineStruct(Building, 100)
{

	defineStructInstruction(Building, GetDataByIndex, 10000, int);   // get in-game building data by index
	defineStructInstruction(Building, GetDataByTag, 10001, string, int);  // get in-game building data by custom tag
	

	defineStructVariable(Building, vec3, vPosition);
	defineStructVariable(Building, int, nType);				//check constants - BUILDINGTYPE
	defineStructVariable(Building, int, nSubType);			//check constants - BUILDINGSUBTYPE
	
	defineStructVariable(Building, int, nMineType);			//check constants - SOVIET_MINE_RESOURCE
	defineStructVariable(Building, float, fMineQualityOfSource);
	
	defineStructVariable(Building, float, fFieldSeeding);
	defineStructVariable(Building, float, fFieldGrowing);
	defineStructVariable(Building, float, fFieldHarvesting);
	
	defineStructVariable(Building, float, fPercFinished);
	defineStructVariable(Building, char, bDemolated);
	
	defineStructVariable(Building, float, fCurrentProduction);
	
	defineStructVariable(Building, int, nWalkingBuildingNum);
	
	defineStructVariable(Building, int, nParkingBuildingNum);
	
	defineStructVariable(Building, int, nVehiclesWorkingNum);
	
	defineStructVariable(Building, int, nWorkersNum);
	
	defineStructVariable(Building, int, nWorkersSecondaryNum);
	
	defineStructVariable(Building, char, bVisible);
	defineStructVariable(Building, float, fVisibleCameraDistance);
	
	defineStructVariable(Building, float, fPollution_AroundBuildingCurrent);
	defineStructVariable(Building, float, fPollution_RadioactivityAroundBuildingCurrent);
	defineStructVariable(Building, float, fHeating_CurrentTemperature);
	defineStructVariable(Building, float, fHeating_WaterTankTemperatureCore);
	defineStructVariable(Building, float, fHeating_WaterTankTemperatureDisplay);
	defineStructVariable(Building, float, fHeating_WaterTankCapacity);
	
	defineStructVariable(Building, float, fEletric_Voltage);
	defineStructVariable(Building, float, fEletric_Wattage);
	defineStructVariable(Building, float, fEletric_CurcuitBreakerCapacity);
	
	defineStructVariable(Building, int, nBorder_USD1_Rub2);
	defineStructVariable(Building, int, nValidRead);
	
	defineStructVariable(Building, char, bConstructionActive);
	defineStructVariable(Building, char, bFundedRUB);
	defineStructVariable(Building, char, bFundedUSD);
	
	defineStructVariable(Building, int, nConstructionBuildingNum);
	defineStructVariable(Building, int, nConstructionOfficeNum);
	defineStructVariable(Building, char, bFireEnabled);
	
	defineStructVariable(Building, float, fUpbringing_Security);
	defineStructVariable(Building, float, fLoyalty_Requirement);
	defineStructVariable(Building, float, fLoyalty_CoolDown);
	defineStructVariable(Building, float, fLoyalty_RequirementStudents);
	
	defineStructVariable(Building, int, nConnectionNum);
	defineStructVariable(Building, int, nConnectionDeadNum);
	
	defineStructVariable(Building, int, nAssignedBuildingDescriptionsNum);
	defineStructVariable(Building, int, nStorageNum);
	
	defineStructVariable(Building, float, fWater_CurrentDrinkAmount);
	defineStructVariable(Building, float, fWater_DrinkCapacity);
	defineStructVariable(Building, float, fWater_CurrentDrinkQuality);
	defineStructVariable(Building, char, bWater_Connected);
	
	defineStructVariable(Building, float, fSewage_CurrentAmount);
	defineStructVariable(Building, float, fSewage_Capacity);
	defineStructVariable(Building, float, fSewage_CurrentQuality);
	defineStructVariable(Building, char, bSewage_Connected);
	
	defineStructVariable(Building, int, nWaterSewage_ConnecitonNum);
	
	defineStructVariable(Building, int, nVehicleParking);
	defineStructVariable(Building, int, nResource_Source);
	
	defineStructVariable(Building, int, nStorage_Resources_PurchaseFlag);
	defineStructVariable(Building, int, nStorage_Resources_SellFlag);
	
	// for nuclear powerplants
	defineStructVariable(Building, int, nCoolingTowersNecessary);
	defineStructVariable(Building, int, nCoolingTowersConnected);
	
	defineStructVariable(Building, int, nVehicleStation);
	defineStructVariable(Building, int, nChildrenBuildingNum);
	
	defineStructVariable(Building, int, nWorkersNeeded);
	defineStructVariable(Building, int, nProffesorsNeeded);
	
	defineStructVariable(Building, int, nParentBuildingIndex);
	defineStructVariable(Building, int, nCitizenAbleServe);
	
	defineStructVariable(Building, int, nAttractionType);
	
	defineStructVariable(Building, int, nResidentialIsCiv);
	
	defineStructVariable(Building, int, nHeatingConnections);
	defineStructVariable(Building, int, nElectricConnections);
	defineStructVariable(Building, int, nWasteConnections);
	
	defineStructVariable(Building, int, nRailDistributionWagonsNum);
	
	defineStructVariable(Building, int, nCablewayPairBuildingIndex);
	defineStructVariable(Building, char, bCablewayOn);
	
}


//functions
///////////////////////////

// number of all buildings in game, including zoll posts
defineInstruction(Building_GetNumberOfBuildings, 11001, int);

defineInstruction(Building_StartFire, 11002, int);

// set custom tag for selected building
defineInstruction(Building_SetTag, 11003, string, int);
defineInstruction(Building_GetByTag, 11004, string, int);

// set custom tag for selected building; should be at least 64 array char[64]
defineInstruction(Building_SetTagChar, 11020, char[], int);
defineInstruction(Building_GetByTagChar, 11021, char[], int);

// obtain tag of building; should be at least 64 array char[64]
defineInstruction(Building_GetCharTag, 11022, int, char[]);

// in m_Building id, in WalkingBuilding id, out WalkingBuilding id in m_Building
defineInstruction(Building_WalkingBuilding_GetID, 11005, int, int, int);
defineInstruction(Building_WalkingBuilding_GetDistance, 11006, int, int, float);

// in m_Building id, in ParkingBuilding id, out ParkingBuilding id in m_Building
defineInstruction(Building_ParkingBuilding_GetID, 11007, int, int, int);
defineInstruction(Building_ParkingBuilding_GetDistance, 11008, int, int, float);

defineInstruction(Building_Workers_GetID, 11009, int, int, int);

defineInstruction(Building_WorkersSecondary_GetID, 11010, int, int, int);

defineInstruction(Building_VehiclesWorking_GetID, 11011, int, int, int);

defineInstruction(Building_Demolish, 11012, int);

// in building id, out: -1 not old town, 0 - not active, 1 - active
defineInstruction(Building_IsOldTownActive, 11013, int, int);

// in building id, out open: 0/1, out focus: 0/1
defineInstruction(Building_HasWindowOpen, 11014, int, int, int);

// in m_Building id, in ConstructionBuilding id, out ConstructionBuilding id in m_Building
defineInstruction(Building_ConstructionBuilding_GetID, 11015, int, int, int);

// in m_Building id, in ConstructionBuilding id, out ConstructionBuilding id in m_Building
defineInstruction(Building_ConstructionOffice_GetID, 11016, int, int, int);

// in m_Building id, in AssignedBuildingDescription id, out AssignedBuildingDescription id in m_Building
defineInstruction(Building_AssignedBuildingDescription_GetBuildingID, 11017, int, int, int);

// in m_Building id, in AssignedBuildingDescription id, out AssignedBuildingDescription id in m_Building
defineInstruction(Building_WaterSewageConnecitons_GetBuildingID, 11018, int, int, int);

// in m_Building id, in AssignedBuildingDescription id, out AssignedBuildingDescription id in m_Building
defineInstruction(Building_ResourceSource_GetBuildingID, 11019, int, int, int);

// in - building id
defineInstruction(Building_ProductionLineCancelAllProduction, 11023, int);

// in - building id, in - station index, out - station type
defineInstruction(Building_GetVehicleStationType, 11024, int, int, int);

// in - building id, in - child index, out - building index
defineInstruction(Building_GetChildBuildingId, 11025, int, int, int);

// in - building id, out - number of near buildings
// also fills a temporary list of located buildings - use this inly within Script_EnterCriticalSection as this list can be overwritten by other functions
defineInstruction(Building_GetTargetNumForFirestations, 11026, int, int);

// in - index in list, out - index building index
defineInstruction(Building_GetPathsBuildingIndex, 11027, int, int);

// in - index in list, out - number of sources
defineInstruction(Building_IsConnectedToEelctricSource, 11028, int, int);
defineInstruction(Building_IsConnectedToHeatSource, 11029, int, int);
defineInstruction(Building_IsConnectedToSewage, 11031, int, int);

// in - building index, wagon index, out - wagon index in list
defineInstruction(Building_GetRailDistributionWagonID, 11030, int, int, int);

// in - building index; out - number
defineInstruction(Building_GetNumberOfHeliports, 11032, int, int);



//////////////////////////////////////////
//////////////////////////////////////////
// VEHICLES
//////////////////////////////////////////
//////////////////////////////////////////

//data struct
///////////////////////////
defineStruct(Vehicle, 101)
{
	defineStructInstruction(Vehicle, GetDataByIndex, 20000, int);   // get in-game vehicle data by index
	defineStructInstruction(Vehicle, GetDataByTag, 20001, string, int);  // get in-game vehicle data by custom tag
	
	
	defineStructVariable(Vehicle, vec3, vPosition);
	defineStructVariable(Vehicle, int, nVehicleType);		// VEHICLETYPE
	defineStructArray(Vehicle, int[3], nSkill);				// VEHICLESKILL
	
	defineStructVariable(Vehicle, int, nTransportType);		// RESOURCE_TRANSPORT_TYPE
	defineStructVariable(Vehicle, float, fResourceCapacity);
	
	defineStructVariable(Vehicle, float, fType_EnginePower);
	defineStructVariable(Vehicle, char, bType_MovementElectric);
	defineStructVariable(Vehicle, float, fType_TakeOffDistance);
	defineStructVariable(Vehicle, float, fType_FuelCapacity);
	
	defineStructVariable(Vehicle, int, nPersonalCar_OwnerID);
	
	defineStructVariable(Vehicle, int, nTrain_ParentID);
	defineStructVariable(Vehicle, int, nTrain_VagonsNum);
	defineStructVariable(Vehicle, int, nTrain_EntireTrainWorkersNum);
	defineStructVariable(Vehicle, int, nWorkers);
	
	defineStructVariable(Vehicle, int, nBuilding_CurrentID);
	defineStructVariable(Vehicle, int, nBuilding_StationBuildingID);
	defineStructVariable(Vehicle, int, nBuilding_StationBuildingTargetID);
	defineStructVariable(Vehicle, int, nBuilding_HomeWorkplaceID);
	defineStructVariable(Vehicle, int, nBuilding_MovingInsideBuilding);
	
	defineStructVariable(Vehicle, char, bFuel_NoFuel);
	defineStructVariable(Vehicle, float, fFuel_Current);
	
	defineStructVariable(Vehicle, int, nCarry_OnOtherVehicleID);
	defineStructVariable(Vehicle, int, nCarry_OtherVehiclesNum);
	defineStructVariable(Vehicle, char, bCarry_MustBeLoadedToVehicle);
	defineStructVariable(Vehicle, char, bCarry_CanBeLoadedToVehicle);
	defineStructVariable(Vehicle, int, nSchedule_MovementBuildingNum);
	defineStructVariable(Vehicle, int, nSchedule_MovementBuildingCurrent);
	
	defineStructVariable(Vehicle, int, nValidRead);
	defineStructVariable(Vehicle, char, bDisableSell);
	defineStructArray(Vehicle, char[128], sIdent);
	defineStructVariable(Vehicle, char, bBrandNew);
	
	defineStructVariable(Vehicle, int, nMovementStationDescription);
}

//functions
///////////////////////////

defineInstruction(Vehicle_GetNumberOfVehicles, 21001, int);

defineInstruction(Vehicle_SetTag, 21003, string, int);
defineInstruction(Vehicle_GetByTag, 21004, string, int);

//func: Vehicle_Schedule_StationGetBuildingID();  m_MovementBuilding[ID]->SerializationIndex
defineInstruction(Vehicle_Schedule_StationGetBuildingID, 21005, int, int, int);

//func: Vehicle_Schedule_StationIsWaypoint()   return (m_MovementStationDescription[ID].HubWaypoint)
defineInstruction(Vehicle_Schedule_StationIsWaypoint, 21006, int, int, int);

//func: Vehicle_Schedule_AddNewStop(int a_BuildingID, int a_Order)  MovementAddBuildingWaypoint()
defineInstruction(Vehicle_Schedule_AddNewStop, 21007, int, int, int);

//func: Vehicle_Schedule_RemoveStop(int a_Order)   MovementRemoveBuildingWaypoint();
defineInstruction(Vehicle_Schedule_RemoveStop, 21008, int, int);

//func Vehicle_Sell(int a_Sell, int a_ExportRUB, int a_ExportUSD)  SOVIET_GAME::Vehicle_Erase
defineInstruction(Vehicle_Sell, 21009, int, int, int);

//func: Vehicle_Train_GetVagonID - m_TrainVehicles[ID]->SerializationIndex
defineInstruction(Vehicle_Train_GetVagonID, 21010, int, int, int);

//func: Vehicle_Train_GetEntireTrainWorkerID
defineInstruction(Vehicle_Train_GetEntireTrainWorkerID, 21011, int, int, int);

//func Vehicle_Workers_GetID
defineInstruction(Vehicle_Workers_GetID, 21012, int, int, int);

//func:  Vehicle_Carry_GetVehicleID - m_CargoVehicles[ID]->SerializationIndex
defineInstruction(Vehicle_Carry_GetVehicleID, 21013, int, int, int);

// get building id from vehicle id and movement building id
//func in - vehicle id; in - station id, out - building id
defineInstruction(Vehicle_MovementBuilding_GetID, 21014, int, int, int);

// set custom tag for selected building; should be at least 64 array char[64]
defineInstruction(Vehicle_SetTagChar, 21015, char[], int);
defineInstruction(Vehicle_GetByTagChar, 21016, char[], int);

// obtain tag of building; should be at least 64 array char[64]
defineInstruction(Vehicle_GetCharTag, 21017, int, char[]);

// in - vehicle id, in -  can sell 0/1
defineInstruction(Vehicle_SetCanSell, 21018, int, int);

// in - building 1 index, in - hub 1 index, in - building 2 index, in hub 2 index, in - takeoff distance, out - 0/1
// can airplane go from building 1 to building 2
defineInstruction(Vehicle_CheckAirplaneConnection, 21019, int, int, int, int, float, int);

// in - vehicle id, string - group id, out - 1/0
// "bus"
// "vagon_cargo"
// "vagon_pasanger"
// "locomotive_diesel"
// "locomotive_eletric"
// "covered"
// "open"
// "dumper"
// "oiltank"
// "cementtank"
// "refrigeration"
// "tram"
// "trainset"
// "harvesting"
// "seeding"
// "exvacator"
// "bulldozer"
// "paver"
// "roller"
// "wood"
// "roadcrane"
// "towercrane"
// "livestock"
// "mixer"
// "trackbuilder"
// "firetruck"
// "personal"
// "fireladder"
// "ambulance"
// "motorvagon"
// "trolleybus"
// "cabins_cargo"
// "cabins_passanger"
// "ships_cargo"
// "ships_passanger"
// "forklifts"
// "snowplows"
// "airpassenger"
// "aircargo"
// "helipassenger"
// "helicargo"
// "police"
// "policebus"
// "containers"
// "water"
// "sewage"
// "waste"
// "trainbox"
// "metro"
defineInstruction(Vehicle_IsPartOfGroup, 21020, int, string, int);


//////////////////////////////////////////
//////////////////////////////////////////
// WORKERS
//////////////////////////////////////////
//////////////////////////////////////////

//data struct
///////////////////////////
defineStruct(Person, 102)
{
	defineStructInstruction(Person, GetDataByIndex, 30000, int);   // get in-game person data by index
	defineStructInstruction(Person, GetDataByTag, 30001, string, int);  // get in-game person data by custom tag
	
	

	defineStructVariable(Person, float, fStatusHappiness);
	defineStructVariable(Person, float, fStatusFood);
	defineStructVariable(Person, float, fStatusHealth);
	defineStructVariable(Person, float, fStatusSoviet);
	defineStructVariable(Person, float, fStatusAlcohol);
	defineStructVariable(Person, float, fStatusCulture);
	defineStructVariable(Person, float, fStatusSport);
	defineStructVariable(Person, float, fStatusReligion);
	defineStructVariable(Person, float, fStatusClothing);
	defineStructVariable(Person, float, fStatusElectronic);
	defineStructVariable(Person, float, fStatusCrime);
	
	defineStructVariable(Person, vec3, vPosition);
	
	// 0 - not a tourist, 1 - soviet, 2 - western
	defineStructVariable(Person, int, nTouristFlag);
	
	defineStructVariable(Person, float, fAge);
	defineStructVariable(Person, float, fEducation);
	defineStructVariable(Person, char, bIsHome);
	defineStructVariable(Person, char, bIsUnemployed);
	defineStructVariable(Person, char, bIsUnemployedDueKids);
	
	defineStructVariable(Person, int, nValidRead);
	
	defineStructVariable(Person, char, bWorkplaceAsProfesor);
	defineStructVariable(Person, char, bWorkOnReconstruction);
	
	// 0 - not foreign, 1 - soviet, 2 - western
	defineStructVariable(Person, int, nForeignWorkerFlag);
	
	defineStructVariable(Person, int, nDemandUnsatisfiedNum);
	defineStructArray(Person, int[7], nDemandUnsatisfied);
	
	defineStructVariable(Person, int, nParentID);
}

//functions
///////////////////////////

// set custom tag
defineInstruction(Person_SetTag, 31001, string, int);
defineInstruction(Person_GetByTag, 31002, string, int);

// person index, status index, value 0-1
// status index starts with fStatusHappiness at 0, fStatusFood at 1, ...
defineInstruction(Person_SetStatus, 31003, int, int, float);

defineInstruction(Person_SetAge, 31004, int, float);
// education 0-3; <0, 1) no education; <1, 2) basic education; <2, 3) high education
defineInstruction(Person_SetEducation, 31005, int, float);

// get the number of all workers on the entire map, this includes tourists and foreign workers on customs
defineInstruction(Person_GetNumberOfPeople, 31006, int);




//////////////////////////////////////////
//////////////////////////////////////////
// NAMEPOINTS
//////////////////////////////////////////
//////////////////////////////////////////

//data struct
///////////////////////////
defineStruct(Namepoint, 103)
{
	defineStructInstruction(Namepoint, GetDataByIndex, 40000, int);   // get in-game Namepoint data by index
	defineStructInstruction(Namepoint, GetDatabyTag, 40001, string, int);  // get in-game Namepoint data by custom tag
	
	
	defineStructVariable(Namepoint, int, nValidRead);
	defineStructVariable(Namepoint, vec3, vPosition);
	defineStructVariable(Namepoint, int, nBuildingNum);
}

//functions
///////////////////////////

// set custom tag
defineInstruction(Namepoint_SetTag, 41001, string, int);
defineInstruction(Namepoint_GetByTag, 41002, string, int);

// get building from namepoint, in - namepoint id, building id in namepoint list, out - building id
defineInstruction(Namepoint_GetBuildingID, 41003, int, int, int);

defineInstruction(Namepoint_GetNumberOfNamepoints, 41004, int);




//////////////////////////////////////////
//////////////////////////////////////////
// RESOURCES
//////////////////////////////////////////
//////////////////////////////////////////

//data struct
///////////////////////////
defineStruct(Resources, 104)
{
	defineStructVariable(Resources, float, workers);
	defineStructVariable(Resources, float, eletric);
	defineStructVariable(Resources, float, vehicles);
	defineStructVariable(Resources, float, trains);
	defineStructVariable(Resources, float, heat);
	defineStructVariable(Resources, float, gravel);
	defineStructVariable(Resources, float, rawgravel);
	defineStructVariable(Resources, float, plants);
	defineStructVariable(Resources, float, steel);
	defineStructVariable(Resources, float, aluminium);
	defineStructVariable(Resources, float, prefabpanels);
	defineStructVariable(Resources, float, bricks);
	defineStructVariable(Resources, float, wood);
	defineStructVariable(Resources, float, oil);
	defineStructVariable(Resources, float, chemicals);
	defineStructVariable(Resources, float, coal);
	defineStructVariable(Resources, float, rawcoal);
	defineStructVariable(Resources, float, iron);
	defineStructVariable(Resources, float, rawiron);
	defineStructVariable(Resources, float, bauxite);
	defineStructVariable(Resources, float, rawbauxite);
	defineStructVariable(Resources, float, bitumen);
	defineStructVariable(Resources, float, boards);
	defineStructVariable(Resources, float, uranium);
	defineStructVariable(Resources, float, yellowcake);
	defineStructVariable(Resources, float, uf6);
	defineStructVariable(Resources, float, nuclearfuel);
	defineStructVariable(Resources, float, nuclearfuelburned);
	defineStructVariable(Resources, float, fuel);
	defineStructVariable(Resources, float, fabric);
	defineStructVariable(Resources, float, alcohol);
	defineStructVariable(Resources, float, cement);
	defineStructVariable(Resources, float, alumina);
	defineStructVariable(Resources, float, food);
	defineStructVariable(Resources, float, clothes);
	defineStructVariable(Resources, float, meat);
	defineStructVariable(Resources, float, livestock);
	defineStructVariable(Resources, float, asphalt);
	defineStructVariable(Resources, float, concrete);
	defineStructVariable(Resources, float, ecomponents);
	defineStructVariable(Resources, float, mcomponents);
	defineStructVariable(Resources, float, plastics);
	defineStructVariable(Resources, float, eletronics);
	defineStructVariable(Resources, float, explosives);
	defineStructVariable(Resources, float, water);
	defineStructVariable(Resources, float, usagewater);
	defineStructVariable(Resources, float, fertiliser_liquid);
	defineStructVariable(Resources, float, waste_gravel);
	defineStructVariable(Resources, float, waste_steel);
	defineStructVariable(Resources, float, waste_aluminium);
	defineStructVariable(Resources, float, waste_plastic);
	defineStructVariable(Resources, float, waste_bio);
	defineStructVariable(Resources, float, fertiliser);
	defineStructVariable(Resources, float, waste_burnable);
	defineStructVariable(Resources, float, waste_toxic);
	defineStructVariable(Resources, float, waste_other);
	defineStructVariable(Resources, float, waste_ash);
	defineStructVariable(Resources, float, waste_mixed);
	defineStructVariable(Resources, float, service_material);
	
	defineStructVariable(Resources, float, _Resources_reserved_16_);
	defineStructVariable(Resources, float, _Resources_reserved_17_);
	defineStructVariable(Resources, float, _Resources_reserved_18_);
	defineStructVariable(Resources, float, _Resources_reserved_19_);
	
	defineStructInstruction(Resources, GetFromBuilding, 50000, int);
	defineStructInstruction(Resources, GetFromVehicle, 50001, int);
	
	defineStructInstruction(Resources, AddFromBuilding, 50002, int);
	defineStructInstruction(Resources, AddFromVehicle, 50003, int);
	
	defineStructInstruction(Resources, GetCapacityFromBuilding, 50009, int);
	defineStructInstruction(Resources, AddCapacityFromBuilding, 50010, int);
	
	defineStructInstruction(Resources, GetSharedCapacityFromBuilding, 50017, int);	// get storage capacity divided by number of resources that can be stored here
	
	defineStructInstruction(Resources, GetProductionFromBuilding, 50013, int);
	defineStructInstruction(Resources, GetConsumptionFromBuilding, 50014, int);
	
	defineStructInstruction(Resources, GetValueMaxFromBuilding, 50018, int);
	
	defineStructInstruction(Resources, GetPurchaseValue, 50020);		// resources that are currently being purchased in purchase window
	defineStructInstruction(Resources, GetPurchaseValueMax, 50021);
	
	defineStructInstruction(Resources, GetStationAvailableFromBuilding, 50022, int);	// slow instruction
	
	defineStructInstruction(Resources, GetFromBuildingStorage, 50023, int, int);
	defineStructInstruction(Resources, GetFromBuildingByTagStorage, 50024, string, int);
	
	defineStructInstruction(Resources, GetConstructionCostFromBuilding, 50025, int);
	
	defineStructInstruction(Resources, GetFromVehicleEntireTrainAndContainers, 50026, int);
	defineStructInstruction(Resources, GetCapacityFromVehicleEntireTrainAndContainers, 50027, int);
	
	// in tag, out success/fail
	
	defineStructInstruction(Resources, GetFromBuildingByTag, 50005, string, int);
	defineStructInstruction(Resources, GetFromVehicleByTag, 50006, string, int);
	
	defineStructInstruction(Resources, AddFromBuildingByTag, 50007, string, int);
	defineStructInstruction(Resources, AddFromVehicleByTag, 50008, string, int);
	
	defineStructInstruction(Resources, GetCapacityFromBuildingByTag, 50011, string, int);
	defineStructInstruction(Resources, AddCapacityFromBuildingByTag, 50012, string, int);
	
	defineStructInstruction(Resources, GetProductionFromBuildingByTag, 50015, string, int);
	defineStructInstruction(Resources, GetConsumptionFromBuildingByTag, 50016, string, int);
	
	defineStructInstruction(Resources, GetValueMaxFromBuildingByTag, 50019, string);
	
	// by tag end
	
	defineStructInstruction(Resources, ResetAmounts, 50004);
	
	defineStructInstruction(Resources, GetFromStationDescriptionLoad, 50028, int, int);
	defineStructInstruction(Resources, GetFromStationDescriptionUnload, 50029, int, int);
	
	defineStructInstruction(Resources, GetFromVehicleStationDescriptionLoad, 50030, int, int);
	defineStructInstruction(Resources, GetFromVehicleStationDescriptionUnload, 50031, int, int);
	
	// trade
	
	defineStructInstruction(Resources, GetTradeCostRUB, 50032);
	defineStructInstruction(Resources, GetTradeCostUSD, 50033);
	
	defineStructInstruction(Resources, GetTradeCostRUB_Sell, 50034);
	defineStructInstruction(Resources, GetTradeCostUSD_Sell, 50035);
	
	defineStructInstruction(Resources, GetTradeCostRUB_SellFactor, 50036);
	defineStructInstruction(Resources, GetTradeCostUSD_SellFactor, 50037);
	
	defineStructInstruction(Resources, GetTradeCostRUB_PurchaseFactor, 50038);
	defineStructInstruction(Resources, GetTradeCostUSD_PurchaseFactor, 50039);
}

//functions
///////////////////////////

// in resource indentifier, in value
defineInstruction(Resources_SetCostRUB, 51001, string, float);
defineInstruction(Resources_SetCostUSD, 51002, string, float);

defineInstruction(Resources_SetCostRUB_Sell, 51003, string, float);
defineInstruction(Resources_SetCostUSD_Sell, 51004, string, float);

defineInstruction(Resources_SetCostRUB_SellFactor, 51005, string, float);
defineInstruction(Resources_SetCostUSD_SellFactor, 51006, string, float);

defineInstruction(Resources_SetCostRUB_PurchaseFactor, 51007, string, float);
defineInstruction(Resources_SetCostUSD_PurchaseFactor, 51008, string, float);




//////////////////////////////////////////
//////////////////////////////////////////
// StatRecord
//////////////////////////////////////////
//////////////////////////////////////////

defineStruct(StatRecord, 105)
{
	defineStructVariable(StatRecord, Resources, ImportTonsRUB);
	defineStructVariable(StatRecord, Resources, ImportValueRUB);
	
	defineStructVariable(StatRecord, Resources, ImportTonsUSD);
	defineStructVariable(StatRecord, Resources, ImportValueUSD);
	
	defineStructVariable(StatRecord, Resources, ExportTonsRUB);
	defineStructVariable(StatRecord, Resources, ExportValueRUB);
	
	defineStructVariable(StatRecord, Resources, ExportTonsUSD);
	defineStructVariable(StatRecord, Resources, ExportValueUSD);
	
	defineStructVariable(StatRecord, Resources, ImportInternationalTonsRUB);
	defineStructVariable(StatRecord, Resources, ImportInternationalValueRUB);
	
	defineStructVariable(StatRecord, Resources, ImportInternationalTonsUSD);
	defineStructVariable(StatRecord, Resources, ImportInternationalValueUSD);
	
	defineStructVariable(StatRecord, Resources, ExportInternationalTonsRUB);
	defineStructVariable(StatRecord, Resources, ExportInternationalValueRUB);
	
	defineStructVariable(StatRecord, Resources, ExportInternationalTonsUSD);
	defineStructVariable(StatRecord, Resources, ExportInternationalValueUSD);
	
	defineStructVariable(StatRecord, Resources, SpendConstruction);
	defineStructVariable(StatRecord, Resources, SpendFactories);
	defineStructVariable(StatRecord, Resources, SpendShops);
	defineStructVariable(StatRecord, Resources, SpendVehicles);
	
	defineStructVariable(StatRecord, Resources, ResourcesProduced);
	
	defineStructVariable(StatRecord, float, Vehicles_ImportUSD);
	defineStructVariable(StatRecord, float, Vehicles_ImportRUB);
	
	defineStructVariable(StatRecord, float, Vehicles_ExportUSD);
	defineStructVariable(StatRecord, float, Vehicles_ExportRUB);
	
	defineStructVariable(StatRecord, int, Citizens_Born);
	defineStructVariable(StatRecord, int, Citizens_Dead);
	defineStructVariable(StatRecord, int, Citizens_Escaped);
	defineStructVariable(StatRecord, int, Citizens_ImigrantSoviet);
	defineStructVariable(StatRecord, int, Citizens_ImigrantAfrica);
	
	defineStructVariable(StatRecord, int, Tourism_ToursitGeneratedUSD);
	defineStructVariable(StatRecord, int, Tourism_ToursitGeneratedRUB);

	defineStructVariable(StatRecord, int, Tourism_ToursitEnteredUSD);
	defineStructVariable(StatRecord, int, Tourism_ToursitEnteredRUB);

	defineStructVariable(StatRecord, int, Tourism_ToursitEndedUSD);
	defineStructVariable(StatRecord, int, Tourism_ToursitEndedRUB);

	defineStructVariable(StatRecord, int, Tourism_ToursitReturnedUSD);
	defineStructVariable(StatRecord, int, Tourism_ToursitReturnedRUB);

	defineStructVariable(StatRecord, int, Tourism_ToursitDiedUSD);
	defineStructVariable(StatRecord, int, Tourism_ToursitDiedRUB);

	defineStructVariable(StatRecord, float, Tourism_ToursitScoreUSD);
	defineStructVariable(StatRecord, float, Tourism_ToursitScoreRUB);

	defineStructArray(StatRecord, float[16], Tourism_SpendUSD);
	defineStructArray(StatRecord, float[16], Tourism_SpendRUB);

	defineStructVariable(StatRecord, float, Tourism_SpendShopsUSD);
	defineStructVariable(StatRecord, float, Tourism_SpendShopsRUB);

	defineStructVariable(StatRecord, float, Tourism_SpendPubsUSD);
	defineStructVariable(StatRecord, float, Tourism_SpendPubsRUB);

	defineStructVariable(StatRecord, float, Tourism_SpendCinemasUSD);
	defineStructVariable(StatRecord, float, Tourism_SpendCinemasRUB);

	defineStructVariable(StatRecord, float, Tourism_SpendSportUSD);
	defineStructVariable(StatRecord, float, Tourism_SpendSportRUB);

	defineStructVariable(StatRecord, float, Tourism_SpendHotelsUSD);
	defineStructVariable(StatRecord, float, Tourism_SpendHotelsRUB);

	defineStructVariable(StatRecord, float, Tourism_SpendRidesUSD);
	defineStructVariable(StatRecord, float, Tourism_SpendRidesRUB);
	
	defineStructVariable(StatRecord, float, Loan_Ballance_USD);
	defineStructVariable(StatRecord, float, Loan_Interest_USD);
	defineStructVariable(StatRecord, float, Loan_Ballance_RUB);
	defineStructVariable(StatRecord, float, Loan_Interest_RUB);
	
	// ------
	
	defineStructInstruction(StatRecord, GetPresent, 60000);
	
	// day month year
	defineStructInstruction(StatRecord, GetFromPresentToDate_DMY, 60001, int, int, int);
	
	// 365, day year
	defineStructInstruction(StatRecord, GetFromPresentToDate_D365Y, 60002, int, int);
	
	// day month year, day month year
	defineStructInstruction(StatRecord, GetFromDateToDate_DMY, 60003, int, int, int, int, int, int);
	
	// 0-365, day year
	defineStructInstruction(StatRecord, GetFromDateToDate_D365Y, 60004, int, int, int, int);
	
	defineStructInstruction(StatRecord, GetSpecificIndex, 60006, int);
	
	
	
	// get stats for namepoint
	// first input param - namepoint id
	defineStructInstruction(StatRecord, GetPresentForNamePoint, 60005, int);
}

// exclude current
defineInstruction(StatRecord_GetNumberOfRecords, 61000, int);


//////////////////////////////////////////
//////////////////////////////////////////
// ROADS
//////////////////////////////////////////
//////////////////////////////////////////

// type index; this is different from SOVIET_ROADTYPE
// 0 - m_Road
// 1 - m_PedestrianWay
// 2 - m_Conveyor
// 3 - m_Pipe
// 4 - m_HeatingPipes
// 5 - m_Rail
// 6 - m_FactoryConnection
// 7 - m_EletricHigh
// 8 - m_EletricLow
// 9 - m_Fence
// 10 - m_Airplane
// 11 - m_Cableway
// 12 - m_WaterPipes

//data struct
///////////////////////////
defineStruct(Road, 106)
{

	defineStructInstruction(Road, GetDataByIndex, 70000, int, int);   // get in-game Road data by type and index
	defineStructInstruction(Road, GetDataByTempConstructionBuilingIndex, 70001, int);   // get in-game Road data by building index
	 
	defineStructVariable(Road, int, nValidRead);
	defineStructVariable(Road, vec3, vHub0);
	defineStructVariable(Road, vec3, vHub1);
	
	defineStructVariable(Road, float, fLength);
	defineStructVariable(Road, int, nPoints);
	
	defineStructVariable(Road, int, nLevel);
	defineStructVariable(Road, int, nSubLevel);
	
	defineStructVariable(Road, int, nOneWay);
	
	defineStructVariable(Road, char, bVisible);

	defineStructVariable(Road, char, bFinished);
	defineStructVariable(Road, char, bBlueprint);
	defineStructVariable(Road, char, bConstructionActive);
	defineStructVariable(Road, char, bFundedRUB);
	defineStructVariable(Road, char, bFundedUSD);
	
	defineStructVariable(Road, int, nType);
	defineStructVariable(Road, char, bHasElectricity);
	
	defineStructVariable(Road, int, nHub0BuildingIndex);
	defineStructVariable(Road, int, nHub1BuildingIndex);
	
	defineStructVariable(Road, int, nHub0BuildingConnectionIndex);
	defineStructVariable(Road, int, nHub1BuildingConnectionIndex);
}

//functions
///////////////////////////

// in - road type, out - num of fragments; -1 if wrong type
defineInstruction(Road_GetNumberOfFragments, 71001, int, int);

// in - road type, out - num of blueprint fragments; -1 if wrong type
defineInstruction(Road_GetNumberOfBlueprints, 71002, int, int);

// out - position, in - type, index, point
defineInstruction(Road_GetPointPositionFromTypeIndexPoint, 71003, vec3, int, int, int);

// out - position, in - building, point index
defineInstruction(Road_GetPointPositionFromConstructionBuilding, 71004, vec3, int, int);



//////////////////////////////////////////
// Infrastructure
//////////////////////////////////////////

defineInstruction(Infrastructure_RoadGetLength, 1100, float);
defineInstruction(Infrastructure_PedestrianwayGetLength, 1101, float);
defineInstruction(Infrastructure_ConveyorGetLength, 1102, float);
defineInstruction(Infrastructure_PipeGetLength, 1103, float);
defineInstruction(Infrastructure_HeatingPipesGetLength, 1104, float);
defineInstruction(Infrastructure_RailGetLength, 1105, float);
defineInstruction(Infrastructure_FactoryConnectionGetLength, 1106, float);
defineInstruction(Infrastructure_EletricHighGetLength, 1107, float);
defineInstruction(Infrastructure_EletricLowGetLength, 1108, float);
defineInstruction(Infrastructure_FenceGetLength, 1109, float);
defineInstruction(Infrastructure_AirplaneGetLength, 1110, float);
defineInstruction(Infrastructure_CablewayGetLength, 1111, float);


//////////////////////////////////////////
//////////////////////////////////////////
// WINDOWS
//////////////////////////////////////////
//////////////////////////////////////////


//data struct
///////////////////////////
defineStruct(Window, 107)
{

	defineStructInstruction(Window, GetDataByIndex, 80000, int);   // get in-game Window data by index; index can change if focused window is chaged
	 
	defineStructVariable(Window, int, nValidRead);
	
	defineStructVariable(Window, char, bMinimized);
	defineStructVariable(Window, vec3, vPosition);
	defineStructVariable(Window, vec3, vWindowCorner);
	defineStructVariable(Window, int, nErrorType);
	defineStructVariable(Window, int, nPurchase);
	
	defineStructVariable(Window, int, nReferenceObjectType);
	defineStructVariable(Window, int, nRefObjectIndex);
	
	defineStructVariable(Window, int, nWindowType);
	
	defineStructVariable(Window, int, nActButton);
	defineStructVariable(Window, int, nActObject);
	defineStructVariable(Window, int, nActObjectOffset);
	defineStructVariable(Window, int, nActObject2);
	defineStructVariable(Window, int, nActObject3);
	defineStructVariable(Window, int, nActObject4);
	
}

//functions
///////////////////////////

// same as clicking on a building
defineInstruction(Window_OpenBuildingWindow, 1007, int);

// get index of topmost window, or -1 if no windows are open
defineInstruction(Window_GetLastWindow, 1008, int);

// set new screen position for selected window
defineInstruction(Window_SetWindowPosition, 1009, int, float, float);

// same as clicking on a vehicle
defineInstruction(Window_OpenVehicleWindow, 81000, int);

// get number of windows
defineInstruction(Window_GetNumberOfWindows, 81001, int);




//////////////////////////////////////////
//////////////////////////////////////////
// Connections
//////////////////////////////////////////
//////////////////////////////////////////


//data struct
///////////////////////////
defineStruct(Connection, 108)
{

	defineStructInstruction(Connection, GetDataByIndex, 90000, int, int);   // get connection data by building index and connection index
	
	defineStructVariable(Connection, int, nValidRead);
	
	defineStructVariable(Connection, int, nType);
	defineStructVariable(Connection, char, bInput);
	defineStructVariable(Connection, char, bOutput);
	
	defineStructVariable(Connection, vec3, vPosition);
	defineStructVariable(Connection, vec3, vPositionCurve);
	
	defineStructVariable(Connection, int, nFragmentOfConnectionSecondaryIndex);
	defineStructVariable(Connection, int, nFragmentOfConnectionIndex);
	
	defineStructVariable(Connection, char, bAllowPass);
	defineStructVariable(Connection, char, bHeight);
	defineStructVariable(Connection, char, bNotPickToTerrain);
	
	defineStructVariable(Connection, float, fHeightToTerrain);
	
	defineStructVariable(Connection, char, bIsOpen);
	defineStructVariable(Connection, char, bIsBorder);
}

//functions
///////////////////////////




//////////////////////////////////////////
//////////////////////////////////////////
// STATION_DESCRIPTION
//////////////////////////////////////////
//////////////////////////////////////////

//data struct
///////////////////////////
defineStruct(StationDescription, 109)
{
	defineStructInstruction(StationDescription, GetDataLoadFromBuilding, 100000, int, int);   // get data by building index and station index
	defineStructInstruction(StationDescription, GetDataUnloadFromBuilding, 100001, int, int);   // get data by building index and station index
	defineStructInstruction(StationDescription, GetDataLoadFromVehicle, 100002, int, int);   // get data by vehicle index and station index
	defineStructInstruction(StationDescription, GetDataUnloadFromVehicle, 100003, int, int);   // get data by vehicle index and station index
	
	defineStructVariable(StationDescription, int, nValidRead);
	
	
	defineStructVariable(StationDescription, char, bActive);
	defineStructVariable(StationDescription, float, fPercent);
	defineStructVariable(StationDescription, int, nResources);
	
	defineStructVariable(StationDescription, char, bWorkers);
	defineStructArray(StationDescription, char[3], bWorkersEducation);
	
	defineStructVariable(StationDescription, char, bPassangers);
	
	defineStructVariable(StationDescription, char, bChilds);
	defineStructArray(StationDescription, char[2], bChildsEducation);
	
	defineStructVariable(StationDescription, char, bNotWait);
	
	defineStructVariable(StationDescription, int, nTypeNewUsedVehicle);
	defineStructVariable(StationDescription, int, nTypeNewUsedTrain);
	
	defineStructVariable(StationDescription, int, nSelectedVehicleGroups);
	defineStructVariable(StationDescription, int, nSelectedTrainGroups);
	
	defineStructVariable(StationDescription, int, nSelectedVehicleResources);
	defineStructVariable(StationDescription, int, nSelectedTrainResources);
	
	defineStructVariable(StationDescription, int, nSelectedVehicleTypes);
	defineStructVariable(StationDescription, int, nSelectedTrainTypes);
}

//functions
///////////////////////////

//////////////////////////////////////////
//////////////////////////////////////////
// Storages
//////////////////////////////////////////
//////////////////////////////////////////

//data struct
///////////////////////////
defineStruct(Storage, 110)
{
	defineStructInstruction(Storage, GetStorageResourceFromBuilding, 110000, int, int);   // get Storage_Resource by building index
	defineStructInstruction(Storage, GetStorageResourceFromBuildingTag, 110001, string, int);   // get Storage_Resource by building tag
	
	defineStructVariable(Storage, int, nValidRead);
	
	defineStructVariable(Storage, int, nResources);
	defineStructVariable(Storage, int, nResourcesBallance);
	defineStructVariable(Storage, float, fIncrease);
	
	defineStructVariable(Storage, char, bImport);
	defineStructVariable(Storage, char, bExport);
	
	defineStructVariable(Storage, int, nDemandType);
	
	defineStructVariable(Storage, int, fCapacity);
	defineStructVariable(Storage, int, nStorageType);
	defineStructVariable(Storage, int, nUsage);
}

//functions
///////////////////////////





//////////////////////////////////////////
//////////////////////////////////////////
// Airplane Runways
//////////////////////////////////////////
//////////////////////////////////////////

//data struct
///////////////////////////
defineStruct(Runway, 111)
{
	defineStructInstruction(Runway, GetDataByIndex, 111000, int);
	
	defineStructVariable(Runway, int, nValidRead);
	defineStructVariable(Runway, float, fTotalLength);
	defineStructVariable(Runway, char, bFinished);
}

//functions
///////////////////////////

defineInstruction(Runway_GetNumberOfRunways, 111100, int);



//////////////////////////////////////////
//////////////////////////////////////////
// Vehicle Types
//////////////////////////////////////////
//////////////////////////////////////////

//data struct
///////////////////////////
defineStruct(VehicleTypes, 112)
{
	defineStructInstruction(VehicleTypes, GetDataByName, 112000, string);
	defineStructInstruction(VehicleTypes, GetDataByIndex, 112001, int);
	
	defineStructVariable(VehicleTypes, int, nValidRead);
	
	defineStructArray(VehicleTypes, char[128], Identifier);
	defineStructVariable(VehicleTypes, int, nVehicleType);			// VEHICLETYPE
	defineStructArray(VehicleTypes, int[3], nSkill);				// VEHICLESKILL
	
	defineStructVariable(VehicleTypes, int, nCostUSD);
	defineStructVariable(VehicleTypes, int, nCostRUB);
	
	defineStructVariable(VehicleTypes, int, nResourceType);			// RESOURCE_TRANSPORT_TYPE
	defineStructVariable(VehicleTypes, float, fResourceCapacity);
	
	defineStructVariable(VehicleTypes, char, bBlueprintPurchased);
	defineStructVariable(VehicleTypes, int, nBrandNewSoldForRUB);
	defineStructVariable(VehicleTypes, int, nBrandNewSoldForUSD);
	defineStructVariable(VehicleTypes, int, nBuiltInProductionLine);
}

//functions
///////////////////////////

defineInstruction(VehicleTypes_GetNumOfActiveTypes, 112101, int);





//////////////////////////////////////////
//////////////////////////////////////////
// CONSTANTS
//////////////////////////////////////////
//////////////////////////////////////////

//BUILDINGTYPE
defineVariable(int, BUILDINGTYPE_CARGO_STATION);
defineVariable(int, BUILDINGTYPE_PASSANGER_STATION);
defineVariable(int, BUILDINGTYPE_LIVING);
defineVariable(int, BUILDINGTYPE_SHOP);
defineVariable(int, BUILDINGTYPE_SCHOOL);
defineVariable(int, BUILDINGTYPE_UNIVERSITY);
defineVariable(int, BUILDINGTYPE_MONUMENT);
defineVariable(int, BUILDINGTYPE_STORAGE);
defineVariable(int, BUILDINGTYPE_FACTORY);
defineVariable(int, BUILDINGTYPE_MINE);
defineVariable(int, BUILDINGTYPE_FIELD);
defineVariable(int, BUILDINGTYPE_FARM);
defineVariable(int, BUILDINGTYPE_KINDERGARTEN);
defineVariable(int, BUILDINGTYPE_ENGINE);
defineVariable(int, BUILDINGTYPE_CONSTRUCTION_OFFICE);
defineVariable(int, BUILDINGTYPE_CONSTRUCTION_OFFICE_RAIL);
defineVariable(int, BUILDINGTYPE_TEMP);
defineVariable(int, BUILDINGTYPE_ROADDEPO);
defineVariable(int, BUILDINGTYPE_RAILDEPO);
defineVariable(int, BUILDINGTYPE_POWERPLANT);
defineVariable(int, BUILDINGTYPE_SUBSTATION);
defineVariable(int, BUILDINGTYPE_TRANSFORMATOR);
defineVariable(int, BUILDINGTYPE_CUSTOMHOUSE);
defineVariable(int, BUILDINGTYPE_CHURCH);
defineVariable(int, BUILDINGTYPE_ELETRIC_EXPORT);
defineVariable(int, BUILDINGTYPE_ELETRIC_IMPORT);
defineVariable(int, BUILDINGTYPE_GAS_STATION);
defineVariable(int, BUILDINGTYPE_RAIL_TRAFO);
defineVariable(int, BUILDINGTYPE_POLLUTION_METER);
defineVariable(int, BUILDINGTYPE_BROADCAST);
defineVariable(int, BUILDINGTYPE_PARKING);
defineVariable(int, BUILDINGTYPE_KINO);
defineVariable(int, BUILDINGTYPE_PUB);
defineVariable(int, BUILDINGTYPE_SPORT);
defineVariable(int, BUILDINGTYPE_HOSPITAL);
defineVariable(int, BUILDINGTYPE_FIRESTATION);
defineVariable(int, BUILDINGTYPE_CITYHALL);
defineVariable(int, BUILDINGTYPE_PRODUCTION_LINE);
defineVariable(int, BUILDINGTYPE_CAR_DEALER);
defineVariable(int, BUILDINGTYPE_SHIP_DOCK);
defineVariable(int, BUILDINGTYPE_DISTRIBUTION_OFFICE);
defineVariable(int, BUILDINGTYPE_CONTAINER_FACILITY);
defineVariable(int, BUILDINGTYPE_FORKLIFT_GARAGE);
defineVariable(int, BUILDINGTYPE_AIRPLANE_GATE);
defineVariable(int, BUILDINGTYPE_AIRPLANE_PARKING);
defineVariable(int, BUILDINGTYPE_AIRPLANE_TOWER);
defineVariable(int, BUILDINGTYPE_COOLING_TOWER);
defineVariable(int, BUILDINGTYPE_HEATING_PLANT);
defineVariable(int, BUILDINGTYPE_HEATING_SUBSTATION);
defineVariable(int, BUILDINGTYPE_HEATING_SWITCH);
defineVariable(int, BUILDINGTYPE_POLICE_STATION);
defineVariable(int, BUILDINGTYPE_ORPHANAGE);
defineVariable(int, BUILDINGTYPE_COURT_HOUSE);
defineVariable(int, BUILDINGTYPE_PRISON);
defineVariable(int, BUILDINGTYPE_SECRET_POLICE);
defineVariable(int, BUILDINGTYPE_UNKNOWN);
defineVariable(int, BUILDINGTYPE_TECHNICAL_OFFICE);
defineVariable(int, BUILDINGTYPE_HOTEL);
defineVariable(int, BUILDINGTYPE_ATTRACTION);
defineVariable(int, BUILDINGTYPE_PEDESTRIAN_BRIDGE);
defineVariable(int, BUILDINGTYPE_DISTRIBUTION_OFFICE_RAIL);
defineVariable(int, BUILDINGTYPE_WATER_PUMP);
defineVariable(int, BUILDINGTYPE_WATER_ENDSTATION);
defineVariable(int, BUILDINGTYPE_WATER_WELL);
defineVariable(int, BUILDINGTYPE_SEWAGE_PUMP);
defineVariable(int, BUILDINGTYPE_SEWAGE_ENDSTATION);
defineVariable(int, BUILDINGTYPE_SEWAGE_DISCHARGE);
defineVariable(int, BUILDINGTYPE_WAITING_STATION);
defineVariable(int, BUILDINGTYPE_WATER_TREATMENT);
defineVariable(int, BUILDINGTYPE_SEWAGE_TREATMENT);
defineVariable(int, BUILDINGTYPE_TRAM_GATE);
defineVariable(int, BUILDINGTYPE_TRASH_CONTAINER);
defineVariable(int, BUILDINGTYPE_DEMOLITION_OFFICE);
defineVariable(int, BUILDINGTYPE_FOREIGN_PIPELINE_EXPORT);
defineVariable(int, BUILDINGTYPE_REPAIR_OFFICE);
defineVariable(int, BUILDINGTYPE_SCRAPYARD);


//BUILDINGSUBTYPE
defineVariable(int, BUILDINGSUBTYPE_HOSTEL);
defineVariable(int, BUILDINGSUBTYPE_MEDICAL);
defineVariable(int, BUILDINGSUBTYPE_TECHNICAL);
defineVariable(int, BUILDINGSUBTYPE_SOVIET);
defineVariable(int, BUILDINGSUBTYPE_RADIO);
defineVariable(int, BUILDINGSUBTYPE_TELEVISION);
defineVariable(int, BUILDINGSUBTYPE_ROAD);
defineVariable(int, BUILDINGSUBTYPE_RAIL);
defineVariable(int, BUILDINGSUBTYPE_TROLLEYBUS);
defineVariable(int, BUILDINGSUBTYPE_SHIP);
defineVariable(int, BUILDINGSUBTYPE_SPACE_FOR_VEHICLES);
defineVariable(int, BUILDINGSUBTYPE_AIRCUSTOM);
defineVariable(int, BUILDINGSUBTYPE_CABLEWAY);
defineVariable(int, BUILDINGSUBTYPE_AIRPLANE);
defineVariable(int, BUILDINGSUBTYPE_RESTAURANT);
defineVariable(int, BUILDINGSUBTYPE_WATER_SWITCH);
defineVariable(int, BUILDINGSUBTYPE_TRAM);
defineVariable(int, BUILDINGSUBTYPE_METRO);
defineVariable(int, BUILDINGSUBTYPE_OWN_CUSTOM);
defineVariable(int, BUILDINGSUBTYPE_UNKNOWN);
defineVariable(int, BUILDINGSUBTYPE_PRIORITY_1);
defineVariable(int, BUILDINGSUBTYPE_PRIORITY_2);

//_SOVIET_WORKER_ATTRACTIVE_TYPE
defineVariable(int, WORKER_ATTRACTIVE_GALLERY);
defineVariable(int, WORKER_ATTRACTIVE_CARUSEL);
defineVariable(int, WORKER_ATTRACTIVE_SWIM);
defineVariable(int, WORKER_ATTRACTIVE_MUSEUM);
defineVariable(int, WORKER_ATTRACTIVE_SIGHT);
defineVariable(int, WORKER_ATTRACTIVE_ZOO);

//SOVIET_MINE_RESOURCE
defineVariable(int, SOVIET_MINE_RESOURCE_OIL);
defineVariable(int, SOVIET_MINE_RESOURCE_IRON);
defineVariable(int, SOVIET_MINE_RESOURCE_COAL);
defineVariable(int, SOVIET_MINE_RESOURCE_GRAVEL);
defineVariable(int, SOVIET_MINE_RESOURCE_WOOD);
defineVariable(int, SOVIET_MINE_RESOURCE_UNKNOWN);
defineVariable(int, SOVIET_MINE_RESOURCE_URANIUM);
defineVariable(int, SOVIET_MINE_RESOURCE_BAUXITE);
defineVariable(int, SOVIET_MINE_RESOURCE_WATER);
defineVariable(int, SOVIET_MINE_RESOURCE_WATER_SURFACE);

//VEHICLESKILL
defineVariable(int, VEHICLESKILL_HARVESTING);
defineVariable(int, VEHICLESKILL_SEEDING);
defineVariable(int, VEHICLESKILL_WOODCARRING);
defineVariable(int, VEHICLESKILL_GRAVELMINING);

defineVariable(int, VEHICLESKILL_CONSTRUCTION_CRANE);
defineVariable(int, VEHICLESKILL_CONSTRUCTION_RAIL_CRANE);
defineVariable(int, VEHICLESKILL_CONSTRUCTION_RAIL_TRACK_LAYER);

defineVariable(int, VEHICLESKILL_CONSTRUCTION_BULLDOZER);
defineVariable(int, VEHICLESKILL_CONSTRUCTION_ASPHALT_LAYING);
defineVariable(int, VEHICLESKILL_CONSTRUCTION_ROLLING);
defineVariable(int, VEHICLESKILL_CONSTRUCTION_GROUNDWORKS);

defineVariable(int, VEHICLESKILL_AMBULANCE);
defineVariable(int, VEHICLESKILL_FIRETRUCK);
defineVariable(int, VEHICLESKILL_FIRELADDER);
defineVariable(int, VEHICLESKILL_PERSONAL);
defineVariable(int, VEHICLESKILL_FORKLIFT);
defineVariable(int, VEHICLESKILL_SNOWPLOW);
defineVariable(int, VEHICLESKILL_POLICE);
defineVariable(int, VEHICLESKILL_POLICEBUS);
defineVariable(int, VEHICLESKILL_WASTE_CONTAINER_BIG);
defineVariable(int, VEHICLESKILL_WASTE_CONTAINER_SMALL);


//VEHICLETYPE
defineVariable(int, VEHICLETYPE_NOTSPECIFIED);
defineVariable(int, VEHICLETYPE_ROAD);
defineVariable(int, VEHICLETYPE_ROAD_SERVICE);
defineVariable(int, VEHICLETYPE_RAIL_VAGON);
defineVariable(int, VEHICLETYPE_RAIL_LOCOMOTIVE);
defineVariable(int, VEHICLETYPE_RAIL_SERVICE);
defineVariable(int, VEHICLETYPE_SHIP);
defineVariable(int, VEHICLETYPE_CABIN);
defineVariable(int, VEHICLETYPE_AIRPLANE);
defineVariable(int, VEHICLETYPE_CONTAINER);
defineVariable(int, VEHICLETYPE_HELICOPTER);
defineVariable(int, VEHICLETYPE_NUM);


//RESOURCE_TRANSPORT_TYPE
defineVariable(int, RESOURCE_TRANSPORT_COVERED);
defineVariable(int, RESOURCE_TRANSPORT_OPEN);
defineVariable(int, RESOURCE_TRANSPORT_GRAVEL);
defineVariable(int, RESOURCE_TRANSPORT_OIL);
defineVariable(int, RESOURCE_TRANSPORT_CEMENT);
defineVariable(int, RESOURCE_TRANSPORT_COOLER);
defineVariable(int, RESOURCE_TRANSPORT_LIVESTOCK);
defineVariable(int, RESOURCE_TRANSPORT_PASSANGER);
defineVariable(int, RESOURCE_TRANSPORT_CONCRETE);
defineVariable(int, RESOURCE_TRANSPORT_ELETRIC);
defineVariable(int, RESOURCE_TRANSPORT_VEHICLES);
defineVariable(int, RESOURCE_TRANSPORT_GENERAL);
defineVariable(int, RESOURCE_TRANSPORT_NUCLEAR1);
defineVariable(int, RESOURCE_TRANSPORT_NUCLEAR2);
defineVariable(int, RESOURCE_TRANSPORT_HEATING);
defineVariable(int, RESOURCE_TRANSPORT_WATER);
defineVariable(int, RESOURCE_TRANSPORT_SEWAGE);
defineVariable(int, RESOURCE_TRANSPORT_WASTE);
defineVariable(int, RESOURCE_TRANSPORT_NUM);

defineVariable(int, PERSON_STATUS_HAPPINESS);
defineVariable(int, PERSON_STATUS_FOOD);
defineVariable(int, PERSON_STATUS_HEALTH);
defineVariable(int, PERSON_STATUS_SOVIET);
defineVariable(int, PERSON_STATUS_ALCOHOL);
defineVariable(int, PERSON_STATUS_CULTURE);
defineVariable(int, PERSON_STATUS_SPORT);
defineVariable(int, PERSON_STATUS_RELIGION);
defineVariable(int, PERSON_STATUS_CLOTHING);
defineVariable(int, PERSON_STATUS_ELECTRONIC);
defineVariable(int, PERSON_STATUS_CRIME);


defineVariable(int, SOVIET_BUILDING_CONNECTION_ROAD);
defineVariable(int, SOVIET_BUILDING_CONNECTION_RAIL);
defineVariable(int, SOVIET_BUILDING_CONNECTION_PEDESTRIAN);
defineVariable(int, SOVIET_BUILDING_CONNECTION_CONNECTION);
defineVariable(int, SOVIET_BUILDING_CONNECTION_OIL);
defineVariable(int, SOVIET_BUILDING_CONNECTION_CEMENT);
defineVariable(int, SOVIET_BUILDING_CONNECTION_GRAVEL);
defineVariable(int, SOVIET_BUILDING_CONNECTION_ELETRIC_HIGH);
defineVariable(int, SOVIET_BUILDING_CONNECTION_ELETRIC_LOW);
defineVariable(int, SOVIET_BUILDING_CONNECTION_CABLEWAY);
defineVariable(int, SOVIET_BUILDING_CONNECTION_AIRPORT);
defineVariable(int, SOVIET_BUILDING_CONNECTION_HEATING_SMALL);
defineVariable(int, SOVIET_BUILDING_CONNECTION_HEATING_BIG);
defineVariable(int, SOVIET_BUILDING_CONNECTION_STEAM);
defineVariable(int, SOVIET_BUILDING_CONNECTION_BULK);
defineVariable(int, SOVIET_BUILDING_CONNECTION_FENCE);
defineVariable(int, SOVIET_BUILDING_CONNECTION_WATER);
defineVariable(int, SOVIET_BUILDING_CONNECTION_WATERPIPE);
defineVariable(int, SOVIET_BUILDING_CONNECTION_SEWAGEPIPE);


defineVariable(int, SOVIET_ROADTYPE_ROAD);
defineVariable(int, SOVIET_ROADTYPE_RAIL);
defineVariable(int, SOVIET_ROADTYPE_RAIL_SECONDARY);
defineVariable(int, SOVIET_ROADTYPE_ROAD_SECONDARY);
defineVariable(int, SOVIET_ROADTYPE_PEDESTRIAN);
defineVariable(int, SOVIET_ROADTYPE_CONNECTION);
defineVariable(int, SOVIET_ROADTYPE_CONVEYOR);
defineVariable(int, SOVIET_ROADTYPE_PIPE);
defineVariable(int, SOVIET_ROADTYPE_ELETRIC_HIGH);
defineVariable(int, SOVIET_ROADTYPE_ELETRIC_LOW);
defineVariable(int, SOVIET_ROADTYPE_WATER);
defineVariable(int, SOVIET_ROADTYPE_CABLEWAY);
defineVariable(int, SOVIET_ROADTYPE_AIRPORT);
defineVariable(int, SOVIET_ROADTYPE_HEATING);
defineVariable(int, SOVIET_ROADTYPE_FENCE);
defineVariable(int, SOVIET_ROADTYPE_PLUMBING);


defineVariable(int, SOVIET_OBJECT_BUILDING);
defineVariable(int, SOVIET_OBJECT_VEHICLE);
defineVariable(int, SOVIET_OBJECT_WORKER);
defineVariable(int, SOVIET_OBJECT_NAMEPOINT);
defineVariable(int, SOVIET_OBJECT_NONE);
defineVariable(int, SOVIET_OBJECT_NOTIFICATION_MESSAGE);
defineVariable(int, SOVIET_OBJECT_GLOBAL_EVENT);
defineVariable(int, SOVIET_OBJECT_QUESTION);
defineVariable(int, SOVIET_OBJECT_LINE);
defineVariable(int, SOVIET_OBJECT_WINDOW);
defineVariable(int, SOVIET_OBJECT_CROSSROAD);
defineVariable(int, SOVIET_OBJECT_ROAD_SIGN);
defineVariable(int, SOVIET_OBJECT_REPLACE);
defineVariable(int, SOVIET_OBJECT_STATION_DESCRIPTION);
defineVariable(int, SOVIET_OBJECT_USED_VEHICLE);
defineVariable(int, SOVIET_OBJECT_SCRIPT);

defineVariable(int, WINDOW_ERROR_NONE);
defineVariable(int, WINDOW_ERROR_OK);
defineVariable(int, WINDOW_ERROR_SELL);
defineVariable(int, WINDOW_ERROR_DEMOLISH);
defineVariable(int, WINDOW_ERROR_QUIT);
defineVariable(int, WINDOW_ERROR_SAVING);
defineVariable(int, WINDOW_ERROR_SAVE_OVERWRITE);
defineVariable(int, WINDOW_ERROR_SAVE_NEW);
defineVariable(int, WINDOW_ERROR_RENAME);
defineVariable(int, WINDOW_ERROR_AUTOSAVE);
defineVariable(int, WINDOW_ERROR_EMPTY);
defineVariable(int, WINDOW_ERROR_SAVE_OVERWRITE2);
defineVariable(int, WINDOW_ERROR_BUILDING_CAPTION);
defineVariable(int, WINDOW_ERROR_CLOSE_WINDOW);
defineVariable(int, WINDOW_ERROR_TREE_REMOVE);
defineVariable(int, WINDOW_ERROR_CHANGE_SETTINGS);
defineVariable(int, WINDOW_ERROR_CHANGE_SETTINGS2);
defineVariable(int, WINDOW_ERROR_EDITOR_CHANGE_TYPE);
defineVariable(int, WINDOW_ERROR_SELL_ALL_VEHICLES);
defineVariable(int, WINDOW_ERROR_CUT_COST_100);
defineVariable(int, WINDOW_ERROR_FILL_WITH_TREES);
defineVariable(int, WINDOW_ERROR_SAVE_OVERWRITE_EXISTING);
defineVariable(int, WINDOW_ERROR_LOAD_IN_GAME);
defineVariable(int, WINDOW_ERROR_LOAD_SAVE);
defineVariable(int, WINDOW_ERROR_DELETE_LOADSAVE_INGAME);
defineVariable(int, WINDOW_ERROR_DELETE_NOTIFICATIONS);
defineVariable(int, WINDOW_ERROR_NEXT_TUTORIAL);
defineVariable(int, WINDOW_ERROR_TUTORIAL_COMPLETED);
defineVariable(int, WINDOW_ERROR_STARTSCRIPT);
defineVariable(int, WINDOW_ERROR_TOOL_TERRAIN);
defineVariable(int, WINDOW_ERROR_LOAD_MISSING_WORKSHOP);
defineVariable(int, WINDOW_ERROR_QUIT_TO_WIN);
defineVariable(int, WINDOW_ERROR_BORDER_SAVE_PROBLEM);
defineVariable(int, WINDOW_ERROR_RECONSTRUCTION);
defineVariable(int, WINDOW_ERROR_RESEARCH);
defineVariable(int, WINDOW_ERROR_SCRIPT_COMPILE);
defineVariable(int, WINDOW_ERROR_RESOURCES_ALL);
defineVariable(int, WINDOW_ERROR_ENDSCRIPT);
defineVariable(int, WINDOW_ERROR_ENDALLSCRIPTS);
defineVariable(int, WINDOW_ERROR_SCRIPT_OBJECTIVE_WINDOW);
defineVariable(int, WINDOW_ERROR_SCRIPT_POINTER_WINDOW);
defineVariable(int, WINDOW_ERROR_SCENARIO_TREE);

defineVariable(int, PURCHASE_TYPE_NONE);
defineVariable(int, PURCHASE_TYPE_USD);
defineVariable(int, PURCHASE_TYPE_RUB);
defineVariable(int, PURCHASE_TYPE_RES_USD);
defineVariable(int, PURCHASE_TYPE_RES_RUB);
defineVariable(int, PURCHASE_TYPE_BLUEPRINT_USD);
defineVariable(int, PURCHASE_TYPE_BLUEPRINT_RUB);
defineVariable(int, PURCHASE_TYPE_PRODUCTION);
defineVariable(int, PURCHASE_TYPE_CONSTRUCTION);
defineVariable(int, PURCHASE_TYPE_VEHICLES_CAN_LOAD);
defineVariable(int, PURCHASE_TYPE_WHERE_CAN_BE_LOADED);
defineVariable(int, PURCHASE_TYPE_REPLACE);
defineVariable(int, PURCHASE_TYPE_STATION_DES_ROAD);
defineVariable(int, PURCHASE_TYPE_STATION_DES_RAIL);
defineVariable(int, PURCHASE_TYPE_DEMOLITION);

defineVariable(int, WINDOW_TINY);
defineVariable(int, WINDOW_SMALL);
defineVariable(int, WINDOW_MEDIUMSMALL);
defineVariable(int, WINDOW_MEDIUM);
defineVariable(int, WINDOW_BIG);
defineVariable(int, WINDOW_MINY);


defineVariable(int, WORKERDEMAND_GODS);
defineVariable(int, WORKERDEMAND_GODS_HIDDEN);
defineVariable(int, WORKERDEMAND_PUB);
defineVariable(int, WORKERDEMAND_RELIGION);
defineVariable(int, WORKERDEMAND_CULTURE);
defineVariable(int, WORKERDEMAND_SPORT);
defineVariable(int, WORKERDEMAND_HOSPITAL);
defineVariable(int, WORKERDEMAND_UNKNOWN);

defineVariable(int, STATIONPARKING_TYPE_ROAD);
defineVariable(int, STATIONPARKING_TYPE_ROAD_PARKING_PERSONAL);
defineVariable(int, STATIONPARKING_TYPE_SHIP);
defineVariable(int, STATIONPARKING_TYPE_AIRPLANE_30M);
defineVariable(int, STATIONPARKING_TYPE_AIRPLANE_40M);
defineVariable(int, STATIONPARKING_TYPE_AIRPLANE_50M);
defineVariable(int, STATIONPARKING_TYPE_AIRPLANE_75M);
defineVariable(int, STATIONPARKING_TYPE_HELIPORT);


// if you want to use constants call this function at the start of your script
defineFunction(InitConstants, void)
{
	//BUILDINGTYPE
	BUILDINGTYPE_CARGO_STATION = 0;
	BUILDINGTYPE_PASSANGER_STATION = 1;

	BUILDINGTYPE_LIVING = 2; 
	BUILDINGTYPE_SHOP = 3;     
	BUILDINGTYPE_SCHOOL = 4;  
	BUILDINGTYPE_UNIVERSITY = 27;  
	BUILDINGTYPE_MONUMENT = 33;  

	BUILDINGTYPE_STORAGE = 5;  
	BUILDINGTYPE_FACTORY = 6;
	BUILDINGTYPE_MINE = 7;
	BUILDINGTYPE_FIELD = 8;
	BUILDINGTYPE_FARM = 9;
 
	BUILDINGTYPE_KINDERGARTEN = 10;  

	BUILDINGTYPE_ENGINE = 11;
	
	BUILDINGTYPE_CONSTRUCTION_OFFICE = 12;
	BUILDINGTYPE_CONSTRUCTION_OFFICE_RAIL = 28;
	
	BUILDINGTYPE_TEMP = 13;

	BUILDINGTYPE_ROADDEPO = 14;
	BUILDINGTYPE_RAILDEPO = 15;

	BUILDINGTYPE_POWERPLANT = 17;
	BUILDINGTYPE_SUBSTATION = 18;
	BUILDINGTYPE_TRANSFORMATOR = 19;

	BUILDINGTYPE_CUSTOMHOUSE = 20;
	BUILDINGTYPE_CHURCH = 21;
	
	BUILDINGTYPE_ELETRIC_EXPORT = 31;
	BUILDINGTYPE_ELETRIC_IMPORT = 32;
	
	BUILDINGTYPE_GAS_STATION = 34;  
	BUILDINGTYPE_RAIL_TRAFO = 35;  

	BUILDINGTYPE_POLLUTION_METER = 36;  

	BUILDINGTYPE_BROADCAST = 37;

	BUILDINGTYPE_PARKING = 38;

	BUILDINGTYPE_KINO = 22;
	BUILDINGTYPE_PUB = 23;
	BUILDINGTYPE_SPORT = 24;

	BUILDINGTYPE_HOSPITAL = 25;
	BUILDINGTYPE_FIRESTATION = 26;

	BUILDINGTYPE_CITYHALL = 39;

	BUILDINGTYPE_PRODUCTION_LINE = 40;
	BUILDINGTYPE_CAR_DEALER = 41;

	BUILDINGTYPE_SHIP_DOCK = 42;

	BUILDINGTYPE_DISTRIBUTION_OFFICE = 43;
	BUILDINGTYPE_CONTAINER_FACILITY = 44;

	BUILDINGTYPE_FORKLIFT_GARAGE = 45;

	BUILDINGTYPE_AIRPLANE_GATE = 46;
	BUILDINGTYPE_AIRPLANE_PARKING = 47;
	BUILDINGTYPE_AIRPLANE_TOWER = 48;
	
	BUILDINGTYPE_COOLING_TOWER = 60;

	BUILDINGTYPE_HEATING_PLANT = 70;
	BUILDINGTYPE_HEATING_SUBSTATION = 71;
	BUILDINGTYPE_HEATING_SWITCH = 72;

	BUILDINGTYPE_POLICE_STATION = 73;
	BUILDINGTYPE_ORPHANAGE = 74;
	BUILDINGTYPE_COURT_HOUSE = 75;
	BUILDINGTYPE_PRISON = 76;
	BUILDINGTYPE_SECRET_POLICE = 77;

	BUILDINGTYPE_UNKNOWN = 30;

	BUILDINGTYPE_TECHNICAL_OFFICE = 49;

	BUILDINGTYPE_HOTEL = 50;
	BUILDINGTYPE_ATTRACTION = 51;

	BUILDINGTYPE_PEDESTRIAN_BRIDGE = 80;
	
	BUILDINGTYPE_DISTRIBUTION_OFFICE_RAIL = 52;
	BUILDINGTYPE_WATER_PUMP = 90;
	BUILDINGTYPE_WATER_ENDSTATION = 91;
	BUILDINGTYPE_WATER_WELL = 92;

	BUILDINGTYPE_SEWAGE_PUMP = 93;
	BUILDINGTYPE_SEWAGE_ENDSTATION = 94;
	BUILDINGTYPE_SEWAGE_DISCHARGE = 95;
	BUILDINGTYPE_WAITING_STATION = 96;
	BUILDINGTYPE_WATER_TREATMENT = 97;
	BUILDINGTYPE_SEWAGE_TREATMENT = 98;

	BUILDINGTYPE_TRAM_GATE = 300;
	BUILDINGTYPE_TRASH_CONTAINER = 105;
	BUILDINGTYPE_DEMOLITION_OFFICE = 106;
	BUILDINGTYPE_FOREIGN_PIPELINE_EXPORT = 107;

	BUILDINGTYPE_REPAIR_OFFICE = 108;
	BUILDINGTYPE_SCRAPYARD = 109;


	//BUILDINGSUBTYPE
	BUILDINGSUBTYPE_HOSTEL = 1;

	BUILDINGSUBTYPE_MEDICAL = 20;
	BUILDINGSUBTYPE_TECHNICAL = 21;
	BUILDINGSUBTYPE_SOVIET = 22;

	BUILDINGSUBTYPE_RADIO = 23;
	BUILDINGSUBTYPE_TELEVISION = 24;

	BUILDINGSUBTYPE_ROAD = 25;
	BUILDINGSUBTYPE_RAIL = 26;
	BUILDINGSUBTYPE_TROLLEYBUS = 27;
	BUILDINGSUBTYPE_SHIP = 19;

	BUILDINGSUBTYPE_SPACE_FOR_VEHICLES = 29;

	BUILDINGSUBTYPE_AIRCUSTOM = 31;

	BUILDINGSUBTYPE_CABLEWAY = 32;

	BUILDINGSUBTYPE_AIRPLANE = 33;

	BUILDINGSUBTYPE_RESTAURANT = 34;

	BUILDINGSUBTYPE_WATER_SWITCH = 35;
	BUILDINGSUBTYPE_TRAM = 36;
	BUILDINGSUBTYPE_METRO = 37;
	BUILDINGSUBTYPE_OWN_CUSTOM = 38;
	BUILDINGSUBTYPE_UNKNOWN = 30;
	BUILDINGSUBTYPE_PRIORITY_1 = 40;
	BUILDINGSUBTYPE_PRIORITY_2 = 41;



	//SOVIET_WORKER_ATTRACTIVE_TYPE
	WORKER_ATTRACTIVE_GALLERY = 0;
	WORKER_ATTRACTIVE_CARUSEL = 1;
	WORKER_ATTRACTIVE_SWIM = 2;
	WORKER_ATTRACTIVE_MUSEUM = 3;
	WORKER_ATTRACTIVE_SIGHT = 4;



	//SOVIET_MINE_RESOURCE
	SOVIET_MINE_RESOURCE_OIL = 0;
	SOVIET_MINE_RESOURCE_IRON = 1;
	SOVIET_MINE_RESOURCE_COAL = 2;
	SOVIET_MINE_RESOURCE_GRAVEL = 3;   
	SOVIET_MINE_RESOURCE_WOOD = 4;  
	SOVIET_MINE_RESOURCE_UNKNOWN = 5;
	SOVIET_MINE_RESOURCE_URANIUM = 6;
	SOVIET_MINE_RESOURCE_BAUXITE = 7;
	SOVIET_MINE_RESOURCE_WATER = 8;
	SOVIET_MINE_RESOURCE_WATER_SURFACE = 9;
	
	
	
	
	//SOVIET_BUILDING_CONNECTION_TYPE
	SOVIET_BUILDING_CONNECTION_ROAD = 0;
	SOVIET_BUILDING_CONNECTION_RAIL = 1;
	SOVIET_BUILDING_CONNECTION_PEDESTRIAN = 2;
	SOVIET_BUILDING_CONNECTION_CONNECTION = 3;
	SOVIET_BUILDING_CONNECTION_OIL = 4;
	SOVIET_BUILDING_CONNECTION_CEMENT = 5;
	SOVIET_BUILDING_CONNECTION_GRAVEL = 6;
	SOVIET_BUILDING_CONNECTION_ELETRIC_HIGH = 7;
	SOVIET_BUILDING_CONNECTION_ELETRIC_LOW = 8;
	SOVIET_BUILDING_CONNECTION_CABLEWAY = 9;
	SOVIET_BUILDING_CONNECTION_AIRPORT = 10;
	SOVIET_BUILDING_CONNECTION_HEATING_SMALL = 11;
	SOVIET_BUILDING_CONNECTION_HEATING_BIG = 12;
	SOVIET_BUILDING_CONNECTION_STEAM = 15;
	SOVIET_BUILDING_CONNECTION_BULK = 16;
	SOVIET_BUILDING_CONNECTION_FENCE = 17;
	SOVIET_BUILDING_CONNECTION_WATER = 18;
	SOVIET_BUILDING_CONNECTION_WATERPIPE = 19;
	SOVIET_BUILDING_CONNECTION_SEWAGEPIPE = 20;
	

	
	
	//VEHICLESKILL
	VEHICLESKILL_HARVESTING = 0;
	VEHICLESKILL_SEEDING = 1;
	VEHICLESKILL_WOODCARRING = 2;
	VEHICLESKILL_GRAVELMINING = 3;
	VEHICLESKILL_CONSTRUCTION_CRANE = 21;
	VEHICLESKILL_CONSTRUCTION_RAIL_CRANE = 22;
	VEHICLESKILL_CONSTRUCTION_RAIL_TRACK_LAYER = 26;
	VEHICLESKILL_CONSTRUCTION_BULLDOZER = 23;
	VEHICLESKILL_CONSTRUCTION_ASPHALT_LAYING = 24;
	VEHICLESKILL_CONSTRUCTION_ROLLING = 25;
	VEHICLESKILL_CONSTRUCTION_GROUNDWORKS = 19;
	VEHICLESKILL_AMBULANCE = 30;
	VEHICLESKILL_FIRETRUCK = 31;
	VEHICLESKILL_FIRELADDER = 32;
	VEHICLESKILL_PERSONAL = 33;
	VEHICLESKILL_FORKLIFT = 34;
	VEHICLESKILL_SNOWPLOW = 35;
	VEHICLESKILL_POLICE = 36;
	VEHICLESKILL_POLICEBUS = 37;
	VEHICLESKILL_WASTE_CONTAINER_BIG = 38;
	VEHICLESKILL_WASTE_CONTAINER_SMALL = 39;
	
	
	
	//VEHICLETYPE
	VEHICLETYPE_NOTSPECIFIED = 0;
	VEHICLETYPE_ROAD = 1;
	VEHICLETYPE_ROAD_SERVICE = 2;
	VEHICLETYPE_RAIL_VAGON = 3;
	VEHICLETYPE_RAIL_LOCOMOTIVE = 4;
	VEHICLETYPE_RAIL_SERVICE = 5;
	VEHICLETYPE_SHIP = 6;
	VEHICLETYPE_CABIN = 7;
	VEHICLETYPE_AIRPLANE = 8;
	VEHICLETYPE_CONTAINER = 9;
	VEHICLETYPE_HELICOPTER = 10;
	VEHICLETYPE_NUM = 11;
	
	
	
	//SOVIET_ROADTYPE
	SOVIET_ROADTYPE_ROAD = 0;
	SOVIET_ROADTYPE_RAIL = 1;
	SOVIET_ROADTYPE_RAIL_SECONDARY = 2;
	SOVIET_ROADTYPE_ROAD_SECONDARY = 3;
	SOVIET_ROADTYPE_PEDESTRIAN = 4;
	SOVIET_ROADTYPE_CONNECTION = 5;
	SOVIET_ROADTYPE_CONVEYOR = 6;
	SOVIET_ROADTYPE_PIPE = 7;
	SOVIET_ROADTYPE_ELETRIC_HIGH = 8;
	SOVIET_ROADTYPE_ELETRIC_LOW = 9;
	SOVIET_ROADTYPE_WATER = 11;
	SOVIET_ROADTYPE_CABLEWAY = 12;
	SOVIET_ROADTYPE_AIRPORT = 13;
	SOVIET_ROADTYPE_HEATING = 14;
	SOVIET_ROADTYPE_FENCE = 15;
	SOVIET_ROADTYPE_PLUMBING = 16;
	
	
	
	//RESOURCE_TRANSPORT_TYPE
	RESOURCE_TRANSPORT_COVERED = 0;
	RESOURCE_TRANSPORT_OPEN = 1;
	RESOURCE_TRANSPORT_GRAVEL = 2;
	RESOURCE_TRANSPORT_OIL = 3;
	RESOURCE_TRANSPORT_CEMENT = 4;
	RESOURCE_TRANSPORT_COOLER = 5;
	RESOURCE_TRANSPORT_LIVESTOCK = 6;
	RESOURCE_TRANSPORT_PASSANGER = 7;
	RESOURCE_TRANSPORT_CONCRETE = 8;
	RESOURCE_TRANSPORT_ELETRIC = 9;
	RESOURCE_TRANSPORT_VEHICLES = 10;
	RESOURCE_TRANSPORT_GENERAL = 11;
	RESOURCE_TRANSPORT_NUCLEAR1 = 12;
	RESOURCE_TRANSPORT_NUCLEAR2 = 13;
	RESOURCE_TRANSPORT_HEATING = 14;
	RESOURCE_TRANSPORT_WATER = 15;
	RESOURCE_TRANSPORT_SEWAGE = 16;
	RESOURCE_TRANSPORT_WASTE = 17;
	RESOURCE_TRANSPORT_NUM = 18;
	
	
	PERSON_STATUS_HAPPINESS = 0;
	PERSON_STATUS_FOOD = 1;
	PERSON_STATUS_HEALTH = 2;
	PERSON_STATUS_SOVIET = 3;
	PERSON_STATUS_ALCOHOL = 4;
	PERSON_STATUS_CULTURE = 5;
	PERSON_STATUS_SPORT = 6;
	PERSON_STATUS_RELIGION = 7;
	PERSON_STATUS_CLOTHING = 8;
	PERSON_STATUS_ELECTRONIC = 9;
	PERSON_STATUS_CRIME = 10;
	
	
	// SOVIET_OBJECT_TYPE
	SOVIET_OBJECT_BUILDING = 0;
	SOVIET_OBJECT_VEHICLE = 1;
	SOVIET_OBJECT_WORKER = 2;
	SOVIET_OBJECT_NAMEPOINT = 3;
	SOVIET_OBJECT_NONE = 4;
	SOVIET_OBJECT_NOTIFICATION_MESSAGE = 5;
	SOVIET_OBJECT_GLOBAL_EVENT = 6;
	SOVIET_OBJECT_QUESTION = 7;
	SOVIET_OBJECT_LINE = 8;
	SOVIET_OBJECT_WINDOW = 9;
	SOVIET_OBJECT_CROSSROAD = 10;
	SOVIET_OBJECT_ROAD_SIGN = 11;
	SOVIET_OBJECT_REPLACE = 12;
	SOVIET_OBJECT_STATION_DESCRIPTION = 13;
	SOVIET_OBJECT_USED_VEHICLE = 14;
	SOVIET_OBJECT_SCRIPT = 15;

	// WINDOW_ERROR_TYPE
	WINDOW_ERROR_NONE = 0;
	WINDOW_ERROR_OK = 1;
	WINDOW_ERROR_SELL = 2;
	WINDOW_ERROR_DEMOLISH = 3;
	WINDOW_ERROR_QUIT = 4;
	WINDOW_ERROR_SAVING = 5;
	WINDOW_ERROR_SAVE_OVERWRITE = 6;
	WINDOW_ERROR_SAVE_NEW = 7;
	WINDOW_ERROR_RENAME = 8;
	WINDOW_ERROR_AUTOSAVE = 9;
	WINDOW_ERROR_EMPTY = 10;
	WINDOW_ERROR_SAVE_OVERWRITE2 = 11;
	WINDOW_ERROR_BUILDING_CAPTION = 12;
	WINDOW_ERROR_CLOSE_WINDOW = 13;
	WINDOW_ERROR_TREE_REMOVE = 14;
	WINDOW_ERROR_CHANGE_SETTINGS = 15;
	WINDOW_ERROR_CHANGE_SETTINGS2 = 16;
	WINDOW_ERROR_EDITOR_CHANGE_TYPE = 17;
	WINDOW_ERROR_SELL_ALL_VEHICLES = 18;
	WINDOW_ERROR_CUT_COST_100 = 19;
	WINDOW_ERROR_FILL_WITH_TREES = 20;
	WINDOW_ERROR_SAVE_OVERWRITE_EXISTING = 21;
	WINDOW_ERROR_LOAD_IN_GAME = 22;
	WINDOW_ERROR_LOAD_SAVE = 23;
	WINDOW_ERROR_DELETE_LOADSAVE_INGAME = 24;
	WINDOW_ERROR_DELETE_NOTIFICATIONS = 25;
	WINDOW_ERROR_NEXT_TUTORIAL = 26;
	WINDOW_ERROR_TUTORIAL_COMPLETED = 27;
	WINDOW_ERROR_STARTSCRIPT = 28;
	WINDOW_ERROR_TOOL_TERRAIN = 29;
	WINDOW_ERROR_LOAD_MISSING_WORKSHOP = 30;
	WINDOW_ERROR_QUIT_TO_WIN = 31;
	WINDOW_ERROR_BORDER_SAVE_PROBLEM = 32;
	WINDOW_ERROR_RECONSTRUCTION = 33;
	WINDOW_ERROR_RESEARCH = 34;
	WINDOW_ERROR_SCRIPT_COMPILE = 35;
	WINDOW_ERROR_RESOURCES_ALL = 36;
	WINDOW_ERROR_ENDSCRIPT = 37;
	WINDOW_ERROR_ENDALLSCRIPTS = 38;
	WINDOW_ERROR_SCRIPT_OBJECTIVE_WINDOW = 39;
	WINDOW_ERROR_SCRIPT_POINTER_WINDOW = 40;
	WINDOW_ERROR_SCENARIO_TREE = 41;
	
	// PURCHASE_TYPE
	PURCHASE_TYPE_NONE = 0;
	PURCHASE_TYPE_USD = 1;
	PURCHASE_TYPE_RUB = 2;
	PURCHASE_TYPE_RES_USD = 3;
	PURCHASE_TYPE_RES_RUB = 4;
	PURCHASE_TYPE_BLUEPRINT_USD = 5;
	PURCHASE_TYPE_BLUEPRINT_RUB = 6;
	PURCHASE_TYPE_PRODUCTION = 7;
	PURCHASE_TYPE_CONSTRUCTION = 8;
	PURCHASE_TYPE_VEHICLES_CAN_LOAD = 9;
	PURCHASE_TYPE_WHERE_CAN_BE_LOADED = 10;
	PURCHASE_TYPE_REPLACE = 11;
	PURCHASE_TYPE_STATION_DES_ROAD = 12;
	PURCHASE_TYPE_STATION_DES_RAIL = 13;
	PURCHASE_TYPE_DEMOLITION = 14;
	
	// WINDOW_TYPE
	WINDOW_TINY = 1;
	WINDOW_SMALL = 0;
	WINDOW_MEDIUMSMALL = 2;
	WINDOW_MEDIUM = 3;
	WINDOW_BIG = 4;
	WINDOW_MINY = 5;
	
	
	// SOVIET_WORKER_DEMAND_TYPE
	WORKERDEMAND_GODS = 1;
	WORKERDEMAND_GODS_HIDDEN = 2;
	WORKERDEMAND_PUB = 3;
	WORKERDEMAND_RELIGION = 4;
	WORKERDEMAND_CULTURE = 5;
	WORKERDEMAND_SPORT = 6;
	WORKERDEMAND_HOSPITAL = 10;
	WORKERDEMAND_UNKNOWN = 15;
	
	
	// SOVIET_BUILDING_STATION
	STATIONPARKING_TYPE_ROAD = -1;
	STATIONPARKING_TYPE_ROAD_PARKING_PERSONAL = 100;
	STATIONPARKING_TYPE_SHIP = 20;
	STATIONPARKING_TYPE_AIRPLANE_30M = 31;
	STATIONPARKING_TYPE_AIRPLANE_40M = 32;
	STATIONPARKING_TYPE_AIRPLANE_50M = 33;
	STATIONPARKING_TYPE_AIRPLANE_75M = 35;
	STATIONPARKING_TYPE_HELIPORT = 34;
	
	
	
	returnVoid();
}